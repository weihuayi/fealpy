import numpy as np
init_data = [{
    'node':np.array([[0. , 0. ],
       [0. , 1. ],
       [0.5, 0. ],
       [0.5, 1. ],
       [1. , 0. ],
       [1. , 1. ]]),
    "halfedge":np.array([[ 3,  2,  8,  6,  1],
       [ 0,  0,  7,  3,  0],
       [ 2,  3,  4, 10,  3],
       [ 3,  0,  1,  7,  2],
       [ 5,  3, 10,  2,  5],
       [ 2,  1,  9, 11,  4],
       [ 0,  2,  0,  8,  6],
       [ 2,  0,  3,  1,  7],
       [ 1,  2,  6,  0,  8],
       [ 4,  1, 11,  5,  9],
       [ 3,  3,  2,  4, 10],
       [ 5,  1,  5,  9, 11]]),
    "NN":6,
    "NE":9,
    "NC":4,
    "NHE":12,
    "NBE":6,
    "NBN":6,
    "TD":2,
    "NV":np.array([3,3,3,3]),
    "NEC":np.array([3,3,3,3]),
    "NNC":np.array([3,3,3,3]),
    "NFC":np.array([3,3,3,3]),
    "hcell": np.array([7,11,8,10]),
    "hedge": np.array([1,3,5,6,7,8,9,10,11]),
    "hnode": np.array([6,8,7,10,9,11])
    },
             {'node':np.array([[0.33333333, 0.33333333],
       [0.83333333, 0.33333333],
       [0.16666667, 0.66666667],
       [0.66666667, 0.66666667],
       [0.        , 0.5       ],
       [0.25      , 0.        ],
       [0.25      , 1.        ],
       [0.75      , 0.        ],
       [0.75      , 1.        ],
       [1.        , 0.5       ],
       [0.        , 0.        ],
       [0.        , 1.        ],
       [0.5       , 0.        ],
       [0.5       , 1.        ],
       [1.        , 0.        ],
       [1.        , 1.        ]]),
                 'halfedge':np.array([[ 0,  3,  2, 14,  1],
       [ 2,  0, 13,  5,  0],
       [ 3,  3, 17,  0,  3],
       [ 0,  2,  4,  7,  2],
       [ 5,  2, 21,  3,  5],
       [ 0,  0,  1, 20,  4],
       [ 1,  5, 10, 16,  7],
       [ 3,  2,  3,  9,  6],
       [ 7,  4, 25, 11,  9],
       [ 1,  2,  7, 24,  8],
       [ 9,  5, 29,  6, 11],
       [ 1,  4,  8, 28, 10],
       [ 2,  1, 15, 19, 13],
       [ 4,  0, 18,  1, 12],
       [ 2,  3,  0, 23, 15],
       [ 6,  1, 22, 12, 14],
       [ 3,  5,  6, 27, 17],
       [ 8,  3, 26,  2, 16],
       [10,  0, 20, 13, 18],
       [ 4,  1, 12, 22, 19],
       [ 5,  0,  5, 18, 20],
       [12,  2, 24,  4, 21],
       [11,  1, 19, 15, 22],
       [ 6,  3, 14, 26, 23],
       [ 7,  2,  9, 21, 24],
       [14,  4, 28,  8, 25],
       [13,  3, 23, 17, 26],
       [ 8,  5, 16, 29, 27],
       [ 9,  4, 11, 25, 28],
       [15,  5, 27, 10, 29]]),
        "NN":16,
    "NE":21,
    "NC":6,
    "NHE":30,
    "NBE":12,
    "NBN":12,
    "TD":2,
    "NV":np.array([5, 4, 6, 6, 4, 5]),
    "NEC":np.array([5, 4, 6, 6, 4, 5]),
    "NNC":np.array([5, 4, 6, 6, 4, 5]),
    "NFC":np.array([5, 4, 6, 6, 4, 5]),
    "hcell": np.array([20, 22, 24, 26, 28, 29]),
    "hedge": np.array([ 1,  3,  5,  7,  9, 11, 13, 15, 17, 18, 19, 20, 21, 22,
                       23, 24, 25, 26, 27, 28, 29]),
    "hnode": np.array(([ 5, 11, 14, 16, 19, 20, 23, 24, 27, 28, 18, 22, 21, 26, 25, 29]))
      }
             ]
from_mesh = [{'mesh':'tri','halfedge':np.array([[ 3,  2,  8,  6,  1],
       [ 0,  0,  7,  3,  0],
       [ 2,  3,  4, 10,  3],
       [ 3,  0,  1,  7,  2],
       [ 5,  3, 10,  2,  5],
       [ 2,  1,  9, 11,  4],
       [ 0,  2,  0,  8,  6],
       [ 2,  0,  3,  1,  7],
       [ 1,  2,  6,  0,  8],
       [ 4,  1, 11,  5,  9],
       [ 3,  3,  2,  4, 10],
       [ 5,  1,  5,  9, 11]]),
              "node":np.array([[0. , 0. ],
       [0. , 1. ],
       [0.5, 0. ],
       [0.5, 1. ],
       [1. , 0. ],
                               [1. , 1. ]])},
             {'mesh':'poly','halfedge':np.array([[ 0,  3,  2, 14,  1],
       [ 2,  0, 13,  5,  0],
       [ 3,  3, 17,  0,  3],
       [ 0,  2,  4,  7,  2],
       [ 5,  2, 21,  3,  5],
       [ 0,  0,  1, 20,  4],
       [ 1,  5, 10, 16,  7],
       [ 3,  2,  3,  9,  6],
       [ 7,  4, 25, 11,  9],
       [ 1,  2,  7, 24,  8],
       [ 9,  5, 29,  6, 11],
       [ 1,  4,  8, 28, 10],
       [ 2,  1, 15, 19, 13],
       [ 4,  0, 18,  1, 12],
       [ 2,  3,  0, 23, 15],
       [ 6,  1, 22, 12, 14],
       [ 3,  5,  6, 27, 17],
       [ 8,  3, 26,  2, 16],
       [10,  0, 20, 13, 18],
       [ 4,  1, 12, 22, 19],
       [ 5,  0,  5, 18, 20],
       [12,  2, 24,  4, 21],
       [11,  1, 19, 15, 22],
       [ 6,  3, 14, 26, 23],
       [ 7,  2,  9, 21, 24],
       [14,  4, 28,  8, 25],
       [13,  3, 23, 17, 26],
       [ 8,  5, 16, 29, 27],
       [ 9,  4, 11, 25, 28],
       [15,  5, 27, 10, 29]]),'node':np.array([[0.33333333, 0.33333333],
       [0.83333333, 0.33333333],
       [0.16666667, 0.66666667],
       [0.66666667, 0.66666667],
       [0.        , 0.5       ],
       [0.25      , 0.        ],
       [0.25      , 1.        ],
       [0.75      , 0.        ],
       [0.75      , 1.        ],
       [1.        , 0.5       ],
       [0.        , 0.        ],
       [0.        , 1.        ],
       [0.5       , 0.        ],
       [0.5       , 1.        ],
       [1.        , 0.        ],
       [1.        , 1.        ]])}
        ]
cell_to_node_edge_cell = [
        {'mesh':'tri', 
                 'cell2node':np.array([[3, 0, 2],
       [2, 4, 5],
       [0, 3, 1],
       [2, 5, 3]]),
                 'bool_cell2node':np.array([[ True, False,  True,  True, False, False],
       [False, False,  True, False,  True,  True],
       [ True,  True, False,  True, False, False],
       [False, False,  True,  True, False,  True]]),
         'cell2edge':np.array([[4, 1, 0],
       [8, 2, 6],
       [5, 3, 0],
       [7, 1, 2]]),
         'bool_cell2edge':np.array([[ True,  True, False, False,  True, False, False, False, False],
       [False, False,  True, False, False, False,  True, False,  True],
       [ True, False, False,  True, False,  True, False, False, False],
       [False,  True,  True, False, False, False, False,  True, False]]),
         'cell2cell':np.array([[0, 3, 2],
       [1, 3, 1],
       [2, 2, 0],
       [3, 0, 1]]),
         'bool_cell2cell':np.array([[ True, False,  True,  True],
       [False,  True, False,  True],
       [ True, False,  True, False],
       [ True,  True, False,  True]]),
 'cell2halfedge': (np.array([ 7,  3,  1, 11,  5,  9,  8,  6,  0, 10,  2,  4]),
                  np.array([ 0,  3,  6,  9, 12])) 
         },
{'mesh':'quad','cell2node':[np.array([3, 1, 0, 2]), np.array([4, 5, 3, 2])],
'bool_cell2node':np.array([[ True,  True,  True,  True, False, False],
       [False, False,  True,  True,  True,  True]]),
'cell2edge':np.array([[1, 2, 0, 3],
       [5, 0, 4, 6]]),
'bool_cell2edge':np.array([[ True,  True,  True,  True, False, False, False],
       [ True, False, False, False,  True,  True,  True]]),
 'cell2cell':np.array([[0, 0, 1, 0],
       [1, 0, 1, 1]]),
 'bool_cell2cell':np.array([[ True,  True],
       [ True,  True]]),
'cell2halfedge': (np.array([4, 2, 3, 1, 7, 6, 0, 5]), np.array([0, 4, 8]))
    },
    {'mesh':'poly',
     'cell2node':[np.array([10,  5,  0,  2,  4]), np.array([ 6, 11,  4,  2]), np.array([12,  7,  1,  3,  0,  5]), np.array([ 8, 13,  6,  2,  0,  3]), np.array([14,  9,  1,  7]), np.array([ 9, 15, 8, 3, 1])],
                 'bool_cell2node':np.array([[ True, False,  True, False,  True,  True, False, False, False, False,  True, False, False, False, False, False], 
                                [False, False,  True, False,  True, False,  True, False, False, False, False,  True, False, False, False, False], 
                                [ True,  True, False,  True, False,  True, False,  True, False, False, False, False,  True, False, False, False], 
                                [ True, False,  True,  True, False, False,  True, False,  True, False, False, False, False,  True, False, False], 
                                [False,  True, False, False, False, False, False,  True, False, True, False, False, False, False,  True, False], 
                                [False,  True, False,  True, False, False,
                                 False, False,  True, True, False, False, False,
                                 False, False,  True]]),
     'cell2edge':(np.array([11,  2,  0,  6,  9, 13, 10,  6,  7, 15,  4,  3,  1,  2, 12, 17, 14, 7,  0,  1,  8, 19,  5,  4, 16, 20, 18,  8,  3,  5]), np.array([ 0,  5,  9, 15, 21, 25, 30])),
        'bool_cell2edge':np.array([[ True, False,  True, False, False, False,  True, False, False,
         True, False,  True, False, False, False, False, False, False,
        False, False, False],
       [False, False, False, False, False, False,  True,  True, False,
        False,  True, False, False,  True, False, False, False, False,
        False, False, False],
       [False,  True,  True,  True,  True, False, False, False, False,
        False, False, False,  True, False, False,  True, False, False,
        False, False, False],
       [ True,  True, False, False, False, False, False,  True,  True,
        False, False, False, False, False,  True, False, False,  True,
        False, False, False],
       [False, False, False, False,  True,  True, False, False, False,
        False, False, False, False, False, False, False,  True, False,
        False,  True, False],
       [False, False, False,  True, False,  True, False, False,  True,
        False, False, False, False, False, False, False, False, False,
         True, False,  True]]),
     'cell2cell':(np.array([0, 2, 3, 1, 0, 1, 1, 0, 3, 2, 4, 5, 3, 0, 2, 3, 3, 1,
                           0, 2, 5, 4, 5, 2, 4, 5, 5, 3, 2, 4]),
     np.array([ 0,  5,  9, 15, 21, 25, 30])),
    'bool_cell2cell':np.array([[ True,  True,  True,  True, False, False],
       [ True,  True, False,  True, False, False],
       [ True, False,  True,  True,  True,  True],
       [ True,  True,  True,  True, False,  True],
       [False, False,  True, False,  True,  True],
       [False, False,  True,  True,  True,  True]]),
     'cell2halfedge': (np.array([20,  5,  1, 13, 18, 22, 19, 12, 15, 24,  9,  7,  3,  4, 21, 26, 23,
       14,  0,  2, 17, 28, 11,  8, 25, 29, 27, 16,  6, 10]), np.array([ 0,  5,  9, 15, 21, 25, 30]))}
                          ]
edge_to_node_edge_cell = [{'mesh': 'tri',
'edge2node': np.array([[3, 0],
       [2, 3],
       [5, 2],
       [1, 0],
       [0, 2],
       [3, 1],
       [2, 4],
       [5, 3],
       [4, 5]]),
'bool_edge2node': np.array([[ True, False, False,  True, False, False],
       [False, False,  True,  True, False, False],
       [False, False,  True, False, False,  True],
       [ True,  True, False, False, False, False],
       [ True, False,  True, False, False, False],
       [False,  True, False,  True, False, False],
       [False, False,  True, False,  True, False],
       [False, False, False,  True, False,  True],
       [False, False, False, False,  True,  True]]),
'edge2edge': np.array([[ True,  True, False,  True,  True,  True, False,  True, False],
       [ True,  True,  True, False,  True,  True,  True,  True, False],
       [False,  True,  True, False,  True, False,  True,  True,  True],
       [ True, False, False,  True,  True,  True, False, False, False],
       [ True,  True,  True,  True,  True, False,  True, False, False],
       [ True,  True, False,  True, False,  True, False,  True, False],
       [False,  True,  True, False,  True, False,  True, False,  True],
       [ True,  True,  True, False, False,  True, False,  True,  True],
       [False, False,  True, False, False, False,  True,  True,  True]]),
'edge2cell': np.array([[0, 2, 2, 2],
       [0, 3, 1, 1],
       [1, 3, 1, 2],
       [2, 2, 1, 1],
       [0, 0, 0, 0],
       [2, 2, 0, 0],
       [1, 1, 2, 2],
       [3, 3, 0, 0],
       [1, 1, 0, 0]])},
{'mesh': 'quad',
'edge2node': np.array([[2, 3],
       [1, 0],
       [0, 2],
       [3, 1],
       [2, 4],
       [5, 3],
       [4, 5]]),
'bool_edge2node': np.array([[False, False,  True,  True, False, False],
       [ True,  True, False, False, False, False],
       [ True, False,  True, False, False, False],
       [False,  True, False,  True, False, False],
       [False, False,  True, False,  True, False],
       [False, False, False,  True, False,  True],
       [False, False, False, False,  True,  True]]),
'edge2edge': np.array([[ True, False,  True,  True,  True,  True, False],
       [False,  True,  True,  True, False, False, False],
       [ True,  True,  True, False,  True, False, False],
       [ True,  True, False,  True, False,  True, False],
       [ True, False,  True, False,  True, False,  True],
       [ True, False, False,  True, False,  True,  True],
       [False, False, False, False,  True,  True,  True]]),
'edge2cell':np.array([[0, 1, 3, 2],
       [0, 0, 1, 1],
       [0, 0, 2, 2],
       [0, 0, 0, 0],
       [1, 1, 3, 3],
       [1, 1, 1, 1],
       [1, 1, 0, 0]]) },
{'mesh':'poly','edge2node': np.array([[ 0,  2],
       [ 3,  0],
       [ 5,  0],
       [ 1,  3],
       [ 7,  1],
       [ 9,  1],
       [ 2,  4],
       [ 2,  6],
       [ 3,  8],
       [ 4, 10],
       [11,  4],
       [10,  5],
       [ 5, 12],
       [ 6, 11],
       [13,  6],
       [12,  7],
       [ 7, 14],
       [ 8, 13],
       [15,  8],
       [14,  9],
       [ 9, 15]]),
'bool_edge2node': np.array([[ True, False,  True, False, False, False, False, False, False,
        False, False, False, False, False, False, False],
       [ True, False, False,  True, False, False, False, False, False,
        False, False, False, False, False, False, False],
       [ True, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False],
       [False,  True, False,  True, False, False, False, False, False,
        False, False, False, False, False, False, False],
       [False,  True, False, False, False, False, False,  True, False,
        False, False, False, False, False, False, False],
       [False,  True, False, False, False, False, False, False, False,
         True, False, False, False, False, False, False],
       [False, False,  True, False,  True, False, False, False, False,
        False, False, False, False, False, False, False],
       [False, False,  True, False, False, False,  True, False, False,
        False, False, False, False, False, False, False],
       [False, False, False,  True, False, False, False, False,  True,
        False, False, False, False, False, False, False],
       [False, False, False, False,  True, False, False, False, False,
        False,  True, False, False, False, False, False],
       [False, False, False, False,  True, False, False, False, False,
        False, False,  True, False, False, False, False],
       [False, False, False, False, False,  True, False, False, False,
        False,  True, False, False, False, False, False],
       [False, False, False, False, False,  True, False, False, False,
        False, False, False,  True, False, False, False],
       [False, False, False, False, False, False,  True, False, False,
        False, False,  True, False, False, False, False],
       [False, False, False, False, False, False,  True, False, False,
        False, False, False, False,  True, False, False],
       [False, False, False, False, False, False, False,  True, False,
        False, False, False,  True, False, False, False],
       [False, False, False, False, False, False, False,  True, False,
        False, False, False, False, False,  True, False],
       [False, False, False, False, False, False, False, False,  True,
        False, False, False, False,  True, False, False],
       [False, False, False, False, False, False, False, False,  True,
        False, False, False, False, False, False,  True],
       [False, False, False, False, False, False, False, False, False,
         True, False, False, False, False,  True, False],
       [False, False, False, False, False, False, False, False, False,
         True, False, False, False, False, False,  True]]),
'edge2edge': np.array([[ True,  True,  True, False, False, False,  True,  True, False,
        False, False, False, False, False, False, False, False, False,
        False, False, False],
       [ True,  True,  True,  True, False, False, False, False,  True,
        False, False, False, False, False, False, False, False, False,
        False, False, False],
       [ True,  True,  True, False, False, False, False, False, False,
        False, False,  True,  True, False, False, False, False, False,
        False, False, False],
       [False,  True, False,  True,  True,  True, False, False,  True,
        False, False, False, False, False, False, False, False, False,
        False, False, False],
       [False, False, False,  True,  True,  True, False, False, False,
        False, False, False, False, False, False,  True,  True, False,
        False, False, False],
       [False, False, False,  True,  True,  True, False, False, False,
        False, False, False, False, False, False, False, False, False,
        False,  True,  True],
       [ True, False, False, False, False, False,  True,  True, False,
         True,  True, False, False, False, False, False, False, False,
        False, False, False],
       [ True, False, False, False, False, False,  True,  True, False,
        False, False, False, False,  True,  True, False, False, False,
        False, False, False],
       [False,  True, False,  True, False, False, False, False,  True,
        False, False, False, False, False, False, False, False,  True,
         True, False, False],
       [False, False, False, False, False, False,  True, False, False,
         True,  True,  True, False, False, False, False, False, False,
        False, False, False],
       [False, False, False, False, False, False,  True, False, False,
         True,  True, False, False,  True, False, False, False, False,
        False, False, False],
       [False, False,  True, False, False, False, False, False, False,
         True, False,  True,  True, False, False, False, False, False,
        False, False, False],
       [False, False,  True, False, False, False, False, False, False,
        False, False,  True,  True, False, False,  True, False, False,
        False, False, False],
       [False, False, False, False, False, False, False,  True, False,
        False,  True, False, False,  True,  True, False, False, False,
        False, False, False],
       [False, False, False, False, False, False, False,  True, False,
        False, False, False, False,  True,  True, False, False,  True,
        False, False, False],
       [False, False, False, False,  True, False, False, False, False,
        False, False, False,  True, False, False,  True,  True, False,
        False, False, False],
       [False, False, False, False,  True, False, False, False, False,
        False, False, False, False, False, False,  True,  True, False,
        False,  True, False],
       [False, False, False, False, False, False, False, False,  True,
        False, False, False, False, False,  True, False, False,  True,
         True, False, False],
       [False, False, False, False, False, False, False, False,  True,
        False, False, False, False, False, False, False, False,  True,
         True, False,  True],
       [False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False,  True, False,
        False,  True,  True],
       [False, False, False, False, False,  True, False, False, False,
        False, False, False, False, False, False, False, False, False,
         True,  True,  True]]),
'edge2cell': np.array([[0, 3, 2, 3],
       [2, 3, 3, 4],
       [0, 2, 1, 4],
       [2, 5, 2, 3],
       [2, 4, 1, 2],
       [4, 5, 1, 4],
       [0, 1, 3, 2],
       [1, 3, 3, 2],
       [3, 5, 5, 2],
       [0, 0, 4, 4],
       [1, 1, 1, 1],
       [0, 0, 0, 0],
       [2, 2, 5, 5],
       [1, 1, 0, 0],
       [3, 3, 1, 1],
       [2, 2, 0, 0],
       [4, 4, 3, 3],
       [3, 3, 0, 0],
       [5, 5, 1, 1],
       [4, 4, 0, 0],
       [5, 5, 0, 0]])}                          ] 
node_to_node_edge_cell = [{'mesh':'tri','node2node': np.array([[ True,  True,  True,  True, False, False],
       [ True,  True, False,  True, False, False],
       [ True, False,  True,  True,  True,  True],
       [ True,  True,  True,  True, False,  True],
       [False, False,  True, False,  True,  True],
       [False, False,  True,  True,  True,  True]]),
'node2cell': np.array([[ True, False,  True, False],
       [False, False,  True, False],
       [ True,  True, False,  True],
       [ True, False,  True,  True],
       [False,  True, False, False],
       [False,  True, False,  True]])},
{'mesh':'quad','node2node': np.array([[ True,  True,  True, False, False, False],
       [ True,  True, False,  True, False, False],
       [ True, False,  True,  True,  True, False],
       [False,  True,  True,  True, False,  True],
       [False, False,  True, False,  True,  True],
       [False, False, False,  True,  True,  True]]),
'node2cell': np.array([[ True, False],
       [ True, False],
       [ True,  True],
       [ True,  True],
       [False,  True],
       [False,  True]])
},
{'mesh':'poly',
 'node2node': np.array([[ True, False,  True,  True, False,  True, False, False, False,
        False, False, False, False, False, False, False],
       [False,  True, False,  True, False, False, False,  True, False,
         True, False, False, False, False, False, False],
       [ True, False,  True, False,  True, False,  True, False, False,
        False, False, False, False, False, False, False],
       [ True,  True, False,  True, False, False, False, False,  True,
        False, False, False, False, False, False, False],
       [False, False,  True, False,  True, False, False, False, False,
        False,  True,  True, False, False, False, False],
       [ True, False, False, False, False,  True, False, False, False,
        False,  True, False,  True, False, False, False],
       [False, False,  True, False, False, False,  True, False, False,
        False, False,  True, False,  True, False, False],
       [False,  True, False, False, False, False, False,  True, False,
        False, False, False,  True, False,  True, False],
       [False, False, False,  True, False, False, False, False,  True,
        False, False, False, False,  True, False,  True],
       [False,  True, False, False, False, False, False, False, False,
         True, False, False, False, False,  True,  True],
       [False, False, False, False,  True,  True, False, False, False,
        False,  True, False, False, False, False, False],
       [False, False, False, False,  True, False,  True, False, False,
        False, False,  True, False, False, False, False],
       [False, False, False, False, False,  True, False,  True, False,
        False, False, False,  True, False, False, False],
       [False, False, False, False, False, False,  True, False,  True,
        False, False, False, False,  True, False, False],
       [False, False, False, False, False, False, False,  True, False,
         True, False, False, False, False,  True, False],
       [False, False, False, False, False, False, False, False,  True,
         True, False, False, False, False, False,  True]]),
'node2cell': np.array([[ True, False,  True,  True, False, False],
       [False, False,  True, False,  True,  True],
       [ True,  True, False,  True, False, False],
       [False, False,  True,  True, False,  True],
       [ True,  True, False, False, False, False],
       [ True, False,  True, False, False, False],
       [False,  True, False,  True, False, False],
       [False, False,  True, False,  True, False],
       [False, False, False,  True, False,  True],
       [False, False, False, False,  True,  True],
       [ True, False, False, False, False, False],
       [False,  True, False, False, False, False],
       [False, False,  True, False, False, False],
       [False, False, False,  True, False, False],
       [False, False, False, False,  True, False],
       [False, False, False, False, False,  True]])}]
halfedge_to= [{'mesh':'tri',
  'halfedge2cellnum':np.array([2, 2, 1, 1, 2, 1, 1, 0, 0, 2, 0, 0]),
               "halfedge2edge":np.array([0, 0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8]) },
 {'mesh':'quad',
  'halfedge2cellnum':np.array([2, 3, 1, 2, 0, 3, 1, 0]),
  'halfedge2edge':np.array([0, 0, 1, 2, 3, 4, 5, 6])},
{'mesh':'poly',
 'halfedge2cellnum':np.array([3, 2, 4, 3, 4, 1, 3, 2, 2, 1, 4, 1, 2, 3, 2, 3, 2,
                              5, 4, 1, 0, 5, 0, 1, 0, 3, 0, 1, 0, 0]),
 'halfedge2edge':np.array([ 0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7,  8,
        8,  9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])}]
ipoint = [{'mesh':'tri','e2p': np.array([[ 3,  6,  7,  0],
       [ 2,  8,  9,  3],
       [ 5, 10, 11,  2],
       [ 1, 12, 13,  0],
       [ 0, 14, 15,  2],
       [ 3, 16, 17,  1],
       [ 2, 18, 19,  4],
       [ 5, 20, 21,  3],
       [ 4, 22, 23,  5]]),
           'c2p':np.array([[ 3,  6,  9,  7, 24,  8,  0, 14, 15,  2],
       [ 2, 18, 11, 19, 25, 10,  4, 22, 23,  5],
       [ 0,  7, 13,  6, 26, 12,  3, 16, 17,  1],
       [ 2, 11,  8, 10, 27,  9,  5, 20, 21,  3]])},
          {'mesh':'quad','e2p': np.array([[ 2,  6,  7,  3],
       [ 1,  8,  9,  0],
       [ 0, 10, 11,  2],
       [ 3, 12, 13,  1],
       [ 2, 14, 15,  4],
       [ 5, 16, 17,  3],
       [ 4, 18, 19,  5]]),
           'c2p':[np.array([ 3, 12, 13,  1,  8,  9,  0, 10, 11,  2,  6,  7, 20, 21, 22]), np.array([ 4, 18, 19,  5, 16, 17,  3,  7, 6,  2, 14, 15, 23, 24, 25])]},
          {'mesh':'poly','e2p':np.array([[ 0, 16, 17,  2],
       [ 3, 18, 19,  0],
       [ 5, 20, 21,  0],
       [ 1, 22, 23,  3],
       [ 7, 24, 25,  1],
       [ 9, 26, 27,  1],
       [ 2, 28, 29,  4],
       [ 2, 30, 31,  6],
       [ 3, 32, 33,  8],
       [ 4, 34, 35, 10],
       [11, 36, 37,  4],
       [10, 38, 39,  5],
       [ 5, 40, 41, 12],
       [ 6, 42, 43, 11],
       [13, 44, 45,  6],
       [12, 46, 47,  7],
       [ 7, 48, 49, 14],
       [ 8, 50, 51, 13],
       [15, 52, 53,  8],
       [14, 54, 55,  9],
       [ 9, 56, 57, 15]]),
           'c2p':[np.array([10, 38, 39,  5, 20, 21,  0, 16, 17,  2, 28, 29,  4, 34, 35, 58, 59, 60]), np.array([ 6, 42, 43, 11, 36, 37,  4, 29, 28,  2, 30, 31, 61, 62, 63]), np.array([12, 46, 47,  7, 24, 25,  1, 22, 23,  3, 18, 19,  0, 21, 20,  5, 40, 41, 64, 65, 66]), np.array([ 8, 50, 51, 13, 44, 45,  6, 31, 30,  2, 17, 16,  0, 19, 18,  3, 32, 33, 67, 68, 69]), np.array([14, 54, 55,  9, 26, 27,  1, 25, 24,  7, 48, 49, 70, 71, 72]), np.array([ 9, 56, 57, 15, 52, 53,  8, 33, 32,  3, 23, 22,  1, 27, 26, 73, 74, 75])]}
          ]          
boundary =[{'mesh':'tri','nex' :np.array([100000, 100000, 100000, 100000, 100000, 100000,      7,      9, 7,     10,      8,     10]),
'isBdNode': np.array([ True,  True,  True,  True,  True,  True]),
'isBdEdge': np.array([False, False, False,  True,  True,  True,  True,  True, True]),
'isBdCell': np.array([ True,  True,  True,  True]),
'isBdHalfedge': np.array([False, False, False, False, False, False,  True,  True,  True, True,  True,  True]),
            },
           {'mesh':'quad' ,'nex': np.array([100000, 100000,      5,      5,      3,      6,      4,      4]),
           'isBdNode': np.array([ True,  True,  True,  True,  True,  True]),
'isBdEdge': np.array([False,  True,  True,  True,  True,  True,  True]),
'isBdCell': np.array([ True,  True]),
'isBdHalfedge': np.array([False, False,  True,  True,  True,  True,  True,  True]) },
           {'mesh':'poly','nex': np.array([100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
       100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
       100000, 100000,     21,     18,     21,     25,     18,     22,
           25,     29,     22,     26,     29,     26]),
'isBdNode': np.array([False, False, False, False,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True]),
'isBdEdge': np.array([False, False, False, False, False, False, False, False, False,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True]),
'isBdCell': np.array([ True,  True,  True,  True,  True,  True]),
'isBdHalfedge': np.array([False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, False, True,  True,  True,  True,  True,  True,  True,  True,  True, True,  True,  True])
    }]
convexity = [{'node':np.array([[0.   , 0.   ],
       [0.   , 0.5  ],
       [0.   , 1.   ],
       [1.   , 0.   ],
       [1.   , 0.5  ],
       [1.   , 1.   ],
       [0.618, 0.191],
       [0.618, 0.691],
       [0.382, 0.309],
       [0.382, 0.809]]),
'halfedge':np.array([[ 6,  2, 10,  3,  1],
       [ 0,  6, 19, 28,  0],
       [ 8,  4, 26, 18,  3],
       [ 0,  2,  0, 13,  2],
       [ 1,  8, 30, 12,  5],
       [ 4,  7, 29,  7,  4],
       [ 7,  3, 14,  9,  7],
       [ 1,  7,  5, 29,  6],
       [ 9,  5, 27, 20,  9],
       [ 1,  3,  6, 17,  8],
       [ 4,  2, 13,  0, 11],
       [ 6,  0, 24, 22, 10],
       [ 4,  8,  4, 30, 13],
       [ 8,  2,  3, 10, 12],
       [ 5,  3, 17,  6, 15],
       [ 7,  1, 25, 23, 14],
       [ 5,  9, 21, 31, 17],
       [ 9,  3,  9, 14, 16],
       [ 0,  4,  2, 26, 18],
       [ 3,  6, 28,  1, 19],
       [ 1,  5,  8, 27, 20],
       [ 2,  9, 31, 16, 21],
       [ 4,  0, 11, 24, 22],
       [ 5,  1, 15, 25, 23],
       [ 3,  0, 22, 11, 28],
       [ 4,  1, 23, 15, 29],
       [ 1,  4, 18,  2, 30],
       [ 2,  5, 20,  8, 31],
       [ 6,  6,  1, 19, 24],
       [ 7,  7,  7,  5, 25],
       [ 8,  8, 12,  4, 26],
       [ 9,  9, 16, 21, 27]]), 
'hlevel':np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) ,
'clevel':np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]) } ]
grad_shape_function=[{'grad_shape_x':np.array([[[[  0.,   5.],
         [-12.,   0.],
         [ 12.,  -6.],
         [  2.,   0.],
         [  0.,   0.],
         [ -2.,   1.]],

        [[-10.,   0.],
         [ 12.,  -6.],
         [  0.,   6.],
         [ -2.,   1.],
         [  0.,   0.],
         [  0.,  -1.]],

        [[  0.,  -5.],
         [ 12.,   0.],
         [-12.,   6.],
         [ -2.,   0.],
         [  0.,   0.],
         [  2.,  -1.]],

        [[  0.,  -5.],
         [ 12.,   0.],
         [-12.,   6.],
         [ -2.,   0.],
         [  0.,   0.],
         [  2.,  -1.]]],


       [[[  0.,   3.],
         [ -8.,   2.],
         [  8.,  -4.],
         [ -2.,   0.],
         [  4.,  -2.],
         [ -2.,   1.]],

        [[ -6.,   0.],
         [  4.,  -4.],
         [  0.,   4.],
         [  2.,  -1.],
         [  0.,   2.],
         [  0.,  -1.]],

        [[  0.,  -3.],
         [  8.,  -2.],
         [ -8.,   4.],
         [  2.,   0.],
         [ -4.,   2.],
         [  2.,  -1.]],

        [[  0.,  -3.],
         [  8.,  -2.],
         [ -8.,   4.],
         [  2.,   0.],
         [ -4.,   2.],
         [  2.,  -1.]]],


       [[[  0.,   3.],
         [ -8.,   0.],
         [  8.,  -2.],
         [  2.,   0.],
         [ -4.,   0.],
         [  2.,  -1.]],

        [[ -6.,   0.],
         [  8.,  -4.],
         [ -4.,   4.],
         [ -2.,   1.],
         [  4.,  -2.],
         [  0.,   1.]],

        [[  0.,  -3.],
         [  8.,   0.],
         [ -8.,   2.],
         [ -2.,   0.],
         [  4.,   0.],
         [ -2.,   1.]],

        [[  0.,  -3.],
         [  8.,   0.],
         [ -8.,   2.],
         [ -2.,   0.],
         [  4.,   0.],
         [ -2.,   1.]]],


       [[[  0.,   1.],
         [ -4.,   4.],
         [  4.,  -2.],
         [ -6.,   0.],
         [  8.,  -4.],
         [ -2.,   1.]],

        [[ -2.,   0.],
         [ -4.,  -2.],
         [  0.,   2.],
         [  6.,  -3.],
         [  0.,   4.],
         [  0.,  -1.]],

        [[  0.,  -1.],
         [  4.,  -4.],
         [ -4.,   2.],
         [  6.,   0.],
         [ -8.,   4.],
         [  2.,  -1.]],

        [[  0.,  -1.],
         [  4.,  -4.],
         [ -4.,   2.],
         [  6.,   0.],
         [ -8.,   4.],
         [  2.,  -1.]]],


       [[[  0.,   1.],
         [ -4.,   2.],
         [  4.,   0.],
         [ -2.,   0.],
         [  0.,  -2.],
         [  2.,  -1.]],

        [[ -2.,   0.],
         [  0.,  -2.],
         [ -4.,   2.],
         [  2.,  -1.],
         [  4.,   0.],
         [  0.,   1.]],

        [[  0.,  -1.],
         [  4.,  -2.],
         [ -4.,   0.],
         [  2.,   0.],
         [  0.,   2.],
         [ -2.,   1.]],

        [[  0.,  -1.],
         [  4.,  -2.],
         [ -4.,   0.],
         [  2.,   0.],
         [  0.,   2.],
         [ -2.,   1.]]],


       [[[  0.,   1.],
         [ -4.,   0.],
         [  4.,   2.],
         [  2.,   0.],
         [ -8.,   0.],
         [  6.,  -3.]],

        [[ -2.,   0.],
         [  4.,  -2.],
         [ -8.,   2.],
         [ -2.,   1.],
         [  8.,  -4.],
         [  0.,   3.]],

        [[  0.,  -1.],
         [  4.,   0.],
         [ -4.,  -2.],
         [ -2.,   0.],
         [  8.,   0.],
         [ -6.,   3.]],

        [[  0.,  -1.],
         [  4.,   0.],
         [ -4.,  -2.],
         [ -2.,   0.],
         [  8.,   0.],
         [ -6.,   3.]]],


       [[[  0.,  -1.],
         [  0.,   6.],
         [  0.,   0.],
         [-10.,   0.],
         [ 12.,  -6.],
         [ -2.,   1.]],

        [[  2.,   0.],
         [-12.,   0.],
         [  0.,   0.],
         [ 10.,  -5.],
         [  0.,   6.],
         [  0.,  -1.]],

        [[  0.,   1.],
         [  0.,  -6.],
         [  0.,   0.],
         [ 10.,   0.],
         [-12.,   6.],
         [  2.,  -1.]],

        [[  0.,   1.],
         [  0.,  -6.],
         [  0.,   0.],
         [ 10.,   0.],
         [-12.,   6.],
         [  2.,  -1.]]],


       [[[  0.,  -1.],
         [  0.,   4.],
         [  0.,   2.],
         [ -6.,   0.],
         [  4.,  -4.],
         [  2.,  -1.]],

        [[  2.,   0.],
         [ -8.,   0.],
         [ -4.,   0.],
         [  6.,  -3.],
         [  4.,   2.],
         [  0.,   1.]],

        [[  0.,   1.],
         [  0.,  -4.],
         [  0.,  -2.],
         [  6.,   0.],
         [ -4.,   4.],
         [ -2.,   1.]],

        [[  0.,   1.],
         [  0.,  -4.],
         [  0.,  -2.],
         [  6.,   0.],
         [ -4.,   4.],
         [ -2.,   1.]]],


       [[[  0.,  -1.],
         [  0.,   2.],
         [  0.,   4.],
         [ -2.,   0.],
         [ -4.,  -2.],
         [  6.,  -3.]],

        [[  2.,   0.],
         [ -4.,   0.],
         [ -8.,   0.],
         [  2.,  -1.],
         [  8.,  -2.],
         [  0.,   3.]],

        [[  0.,   1.],
         [  0.,  -2.],
         [  0.,  -4.],
         [  2.,   0.],
         [  4.,   2.],
         [ -6.,   3.]],

        [[  0.,   1.],
         [  0.,  -2.],
         [  0.,  -4.],
         [  2.,   0.],
         [  4.,   2.],
         [ -6.,   3.]]],


       [[[  0.,  -1.],
         [  0.,   0.],
         [  0.,   6.],
         [  2.,   0.],
         [-12.,   0.],
         [ 10.,  -5.]],

        [[  2.,   0.],
         [  0.,   0.],
         [-12.,   0.],
         [ -2.,   1.],
         [ 12.,  -6.],
         [  0.,   5.]],

        [[  0.,   1.],
         [  0.,   0.],
         [  0.,  -6.],
         [ -2.,   0.],
         [ 12.,   0.],
         [-10.,   5.]],

        [[  0.,   1.],
         [  0.,   0.],
         [  0.,  -6.],
         [ -2.,   0.],
         [ 12.,   0.],
         [-10.,   5.]]]]) ,
        'grad_shape_u':np.array([[[ 5.,  0.,  0.],
        [ 0.,  6.,  0.],
        [ 0.,  0.,  6.],
        [-0., -1., -0.],
        [ 0.,  0.,  0.],
        [-0., -0., -1.]],

       [[ 3.,  0.,  0.],
        [ 2.,  4.,  0.],
        [ 0.,  0.,  4.],
        [ 0.,  1.,  0.],
        [ 0.,  0.,  2.],
        [-0., -0., -1.]],

       [[ 3.,  0.,  0.],
        [ 0.,  4.,  0.],
        [ 2.,  0.,  4.],
        [-0., -1., -0.],
        [ 0.,  2.,  0.],
        [ 0.,  0.,  1.]],

       [[ 1.,  0.,  0.],
        [ 4.,  2.,  0.],
        [ 0.,  0.,  2.],
        [ 0.,  3.,  0.],
        [ 0.,  0.,  4.],
        [-0., -0., -1.]],

       [[ 1.,  0.,  0.],
        [ 2.,  2.,  0.],
        [ 2.,  0.,  2.],
        [ 0.,  1.,  0.],
        [ 0.,  2.,  2.],
        [ 0.,  0.,  1.]],

       [[ 1.,  0.,  0.],
        [ 0.,  2.,  0.],
        [ 4.,  0.,  2.],
        [-0., -1., -0.],
        [ 0.,  4.,  0.],
        [ 0.,  0.,  3.]],

       [[-1., -0., -0.],
        [ 6.,  0.,  0.],
        [ 0.,  0.,  0.],
        [ 0.,  5.,  0.],
        [ 0.,  0.,  6.],
        [-0., -0., -1.]],

       [[-1., -0., -0.],
        [ 4.,  0.,  0.],
        [ 2.,  0.,  0.],
        [ 0.,  3.,  0.],
        [ 0.,  2.,  4.],
        [ 0.,  0.,  1.]],

       [[-1., -0., -0.],
        [ 2.,  0.,  0.],
        [ 4.,  0.,  0.],
        [ 0.,  1.,  0.],
        [ 0.,  4.,  2.],
        [ 0.,  0.,  3.]],

       [[-1., -0., -0.],
        [ 0.,  0.,  0.],
        [ 6.,  0.,  0.],
        [-0., -1., -0.],
        [ 0.,  6.,  0.],
        [ 0.,  0.,  5.]]])}]
