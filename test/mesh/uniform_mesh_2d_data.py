import numpy as np

init_mesh_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

        # "node": np.array([[[0, 0], [0, 1], [0, 2]],
        #                   [[1, 0], [1, 1], [1, 2]],
        #                   [[2, 0], [2, 1], [2, 2]]], dtype=np.float64),
        "node": np.array([[0, 0],
                            [0, 1],
                            [0, 2],
                            [1, 0],
                            [1, 1],
                            [1, 2],
                            [2, 0],
                            [2, 1],
                            [2, 2]], dtype=np.float64),
        "edge": np.array([[0, 3],
                          [1, 4],
                          [5, 2],
                          [3, 6],
                          [4, 7],
                          [8, 5],
                          [1, 0],
                          [2, 1],
                          [3, 4],
                          [4, 5],
                          [6, 7],
                          [7, 8]], dtype=np.int32),
        "face": np.array([[0, 3],
                          [1, 4],
                          [5, 2],
                          [3, 6],
                          [4, 7],
                          [8, 5],
                          [1, 0],
                          [2, 1],
                          [3, 4],
                          [4, 5],
                          [6, 7],
                          [7, 8]], dtype=np.int32),

        "cell": np.array([[0, 1, 3, 4],
                          [1, 2, 4, 5],
                          [3, 4, 6, 7],
                          [4, 5, 7, 8]], dtype=np.int32),

        "NN": 9,
        "NE": 12,
        "NF": 12,
        "NC": 4,
    }
]

entity_measure_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

    }
]

interpolation_points_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

        "ipoints_p1": np.array([[0, 0],
                                [0, 1],
                                [0, 2],
                                [1, 0],
                                [1, 1],
                                [1, 2],
                                [2, 0],
                                [2, 1],
                                [2, 2]], dtype=np.float64),
        "ipoints_p2": np.array([[0.0, 0.0],
                                [0.0, 1.0],
                                [0.0, 2.0],
                                [1.0, 0.0],
                                [1.0, 1.0],
                                [1.0, 2.0],
                                [2.0, 0.0],
                                [2.0, 1.0],
                                [2.0, 2.0],
                                [0.5, 0.0],
                                [0.5, 1.0],
                                [0.5, 2.0],
                                [1.5, 0.0],
                                [1.5, 1.0],
                                [1.5, 2.0],
                                [0.0, 0.5],
                                [0.0, 1.5],
                                [1.0, 0.5],
                                [1.0, 1.5],
                                [2.0, 0.5],
                                [2.0, 1.5],
                                [0.5, 0.5],
                                [0.5, 1.5],
                                [1.5, 0.5],
                                [1.5, 1.5]], dtype=np.float64),
    }
]


entity_to_ipoints_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

    }
]

quadrature_formula_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

        "bcs_q1": (np.array([[0.5, 0.5]], dtype=np.float64),
                   np.array([[0.5, 0.5]], dtype=np.float64)),
        "bcs_q2": (np.array([[0.78867513, 0.21132487],
                             [0.21132487, 0.78867513]], dtype=np.float64),
                   np.array([[0.78867513, 0.21132487],
                             [0.21132487, 0.78867513]], dtype=np.float64)),
    }
]

shape_function_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

        # "shape_function_q3_p1": np.array([
        #     [0.78729833, 0.1, 0.1, 0.01270167],
        #     [0.44364917, 0.44364917, 0.05635083, 0.05635083],
        #     [0.1, 0.78729833, 0.01270167, 0.1],
        #     [0.44364917, 0.05635083, 0.44364917, 0.05635083],
        #     [0.25, 0.25, 0.25, 0.25],
        #     [0.05635083, 0.44364917, 0.05635083, 0.44364917],
        #     [0.1, 0.01270167, 0.78729833, 0.1],
        #     [0.05635083, 0.05635083, 0.44364917, 0.44364917],
        #     [0.01270167, 0.1, 0.1, 0.78729833]
        # ], dtype=np.float64),
        # "shape_function_q3_p2": np.array([
        #     [0.472379, 0.27491933, -0.06, 0.27491933, 0.16, -0.03491933, -0.06, -0.03491933, 0.007621],
        #     [0., 0.68729833, 0., 0., 0.4, 0., 0., -0.08729833, 0.],
        #     [-0.06, 0.27491933, 0.472379, -0.03491933, 0.16, 0.27491933, 0.007621, -0.03491933, -0.06],
        #     [0., 0., 0., 0.68729833, 0.4, -0.08729833, 0., 0., 0.],
        #     [0., 0., 0., 0., 1., 0., 0., 0., 0.],
        #     [0., 0., 0., -0.08729833, 0.4, 0.68729833, 0., 0., 0.],
        #     [-0.06, -0.03491933, 0.007621, 0.27491933, 0.16, -0.03491933, 0.472379, 0.27491933, -0.06],
        #     [0., -0.08729833, 0., 0., 0.4, 0., 0., 0.68729833, 0.],
        #     [0.007621, -0.03491933, -0.06, -0.03491933, 0.16, 0.27491933, -0.06, 0.27491933, 0.472379]
        # ], dtype=np.float64),
    }
]

grad_shape_function_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

#         "grad_shape_function_u_q3_p1": np.array([
#     [[-0.88729833, -0.88729833], [-0.11270167,  0.88729833], [ 0.88729833, -0.11270167], [ 0.11270167,  0.11270167]],
#     [[-0.5,        -0.88729833], [-0.5,         0.88729833], [ 0.5,        -0.11270167], [ 0.5,         0.11270167]],
#     [[-0.11270167, -0.88729833], [-0.88729833,  0.88729833], [ 0.11270167, -0.11270167], [ 0.88729833,  0.11270167]],
#     [[-0.88729833, -0.5       ], [-0.11270167,  0.5       ], [ 0.88729833, -0.5       ], [ 0.11270167,  0.5       ]],
#     [[-0.5,        -0.5       ], [-0.5,         0.5       ], [ 0.5,        -0.5       ], [ 0.5,         0.5       ]],
#     [[-0.11270167, -0.5       ], [-0.88729833,  0.5       ], [ 0.11270167, -0.5       ], [ 0.88729833,  0.5       ]],
#     [[-0.88729833, -0.11270167], [-0.11270167,  0.11270167], [ 0.88729833, -0.88729833], [ 0.11270167,  0.88729833]],
#     [[-0.5,        -0.11270167], [-0.5,         0.11270167], [ 0.5,        -0.88729833], [ 0.5,         0.88729833]],
#     [[-0.11270167, -0.11270167], [-0.88729833,  0.11270167], [ 0.11270167, -0.88729833], [ 0.88729833,  0.88729833]]
# ], dtype=np.float64),
#         "grad_shape_function_x_q3_p1": np.array([
#     [[[-0.88729833, -0.88729833], [-0.11270167, 0.88729833], [0.88729833, -0.11270167], [0.11270167, 0.11270167]],
#      [[-0.88729833, -0.88729833], [-0.11270167, 0.88729833], [0.88729833, -0.11270167], [0.11270167, 0.11270167]],
#      [[-0.88729833, -0.88729833], [-0.11270167, 0.88729833], [0.88729833, -0.11270167], [0.11270167, 0.11270167]],
#      [[-0.88729833, -0.88729833], [-0.11270167, 0.88729833], [0.88729833, -0.11270167], [0.11270167, 0.11270167]]],

#     [[[-0.5, -0.88729833], [-0.5, 0.88729833], [0.5, -0.11270167], [0.5, 0.11270167]],
#      [[-0.5, -0.88729833], [-0.5, 0.88729833], [0.5, -0.11270167], [0.5, 0.11270167]],
#      [[-0.5, -0.88729833], [-0.5, 0.88729833], [0.5, -0.11270167], [0.5, 0.11270167]],
#      [[-0.5, -0.88729833], [-0.5, 0.88729833], [0.5, -0.11270167], [0.5, 0.11270167]]],

#     [[[-0.11270167, -0.88729833], [-0.88729833, 0.88729833], [0.11270167, -0.11270167], [0.88729833, 0.11270167]],
#      [[-0.11270167, -0.88729833], [-0.88729833, 0.88729833], [0.11270167, -0.11270167], [0.88729833, 0.11270167]],
#      [[-0.11270167, -0.88729833], [-0.88729833, 0.88729833], [0.11270167, -0.11270167], [0.88729833, 0.11270167]],
#      [[-0.11270167, -0.88729833], [-0.88729833, 0.88729833], [0.11270167, -0.11270167], [0.88729833, 0.11270167]]],

#     [[[-0.88729833, -0.5], [-0.11270167, 0.5], [0.88729833, -0.5], [0.11270167, 0.5]],
#      [[-0.88729833, -0.5], [-0.11270167, 0.5], [0.88729833, -0.5], [0.11270167, 0.5]],
#      [[-0.88729833, -0.5], [-0.11270167, 0.5], [0.88729833, -0.5], [0.11270167, 0.5]],
#      [[-0.88729833, -0.5], [-0.11270167, 0.5], [0.88729833, -0.5], [0.11270167, 0.5]]],

#     [[[-0.5, -0.5], [-0.5, 0.5], [0.5, -0.5], [0.5, 0.5]],
#      [[-0.5, -0.5], [-0.5, 0.5], [0.5, -0.5], [0.5, 0.5]],
#      [[-0.5, -0.5], [-0.5, 0.5], [0.5, -0.5], [0.5, 0.5]],
#      [[-0.5, -0.5], [-0.5, 0.5], [0.5, -0.5], [0.5, 0.5]]],

#     [[[-0.11270167, -0.5], [-0.88729833, 0.5], [0.11270167, -0.5], [0.88729833, 0.5]],
#      [[-0.11270167, -0.5], [-0.88729833, 0.5], [0.11270167, -0.5], [0.88729833, 0.5]],
#      [[-0.11270167, -0.5], [-0.88729833, 0.5], [0.11270167, -0.5], [0.88729833, 0.5]],
#      [[-0.11270167, -0.5], [-0.88729833, 0.5], [0.11270167, -0.5], [0.88729833, 0.5]]],

#     [[[-0.88729833, -0.11270167], [-0.11270167, 0.11270167], [0.88729833, -0.88729833], [0.11270167, 0.88729833]],
#      [[-0.88729833, -0.11270167], [-0.11270167, 0.11270167], [0.88729833, -0.88729833], [0.11270167, 0.88729833]],
#      [[-0.88729833, -0.11270167], [-0.11270167, 0.11270167], [0.88729833, -0.88729833], [0.11270167, 0.88729833]],
#      [[-0.88729833, -0.11270167], [-0.11270167, 0.11270167], [0.88729833, -0.88729833], [0.11270167, 0.88729833]]],

#     [[[-0.5, -0.11270167], [-0.5, 0.11270167], [0.5, -0.88729833], [0.5, 0.88729833]],
#      [[-0.5, -0.11270167], [-0.5, 0.11270167], [0.5, -0.88729833], [0.5, 0.88729833]],
#      [[-0.5, -0.11270167], [-0.5, 0.11270167], [0.5, -0.88729833], [0.5, 0.88729833]],
#      [[-0.5, -0.11270167], [-0.5, 0.11270167], [0.5, -0.88729833], [0.5, 0.88729833]]],

#     [[[-0.11270167, -0.11270167], [-0.88729833, 0.11270167], [0.11270167, -0.88729833], [0.88729833, 0.88729833]],
#      [[-0.11270167, -0.11270167], [-0.88729833, 0.11270167], [0.11270167, -0.88729833], [0.88729833, 0.88729833]],
#      [[-0.11270167, -0.11270167], [-0.88729833, 0.11270167], [0.11270167, -0.88729833], [0.88729833, 0.88729833]],
#      [[-0.11270167, -0.11270167], [-0.88729833, 0.11270167], [0.11270167, -0.88729833], [0.88729833, 0.88729833]]]
# ], dtype=np.float64),
    }
]

barycenter_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),

        "cell_barycenter": np.array([[[0.5, 0.5],
                [0.5, 1.5]],

               [[1.5, 0.5],
                [1.5, 1.5]]], dtype=np.float64),
        
        "edgex_barycenter": np.array([[[0.5, 0.0],
                [0.5, 1.0],
                [0.5, 2.0]],

               [[1.5, 0.0],
                [1.5, 1.0],
                [1.5, 2.0]]], dtype=np.float64),
        
        "edgey_barycenter": np.array([[[0.5, 0.0],
                [0.5, 2.0]],

               [[1.0, 0.0],
                [1.0, 2.0]],

               [[1.5, 0.0],
                [1.5, 2.0]]], dtype=np.float64),
    }
]

bc2point_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),
    }
]

uniform_refine_data = [
    {
        "extent": (0, 2, 0, 2),
        "h": (1.0, 1.0),
        "origin": (0, 0),
        "node_refined": np.array([
            [0.0, 0.0], [0.0, 0.5], [0.0, 1.0], [0.0, 1.5], [0.0, 2.0],
            [0.5, 0.0], [0.5, 0.5], [0.5, 1.0], [0.5, 1.5], [0.5, 2.0],
            [1.0, 0.0], [1.0, 0.5], [1.0, 1.0], [1.0, 1.5], [1.0, 2.0],
            [1.5, 0.0], [1.5, 0.5], [1.5, 1.0], [1.5, 1.5], [1.5, 2.0],
            [2.0, 0.0], [2.0, 0.5], [2.0, 1.0], [2.0, 1.5], [2.0, 2.0]
        ]),
    }
]

topology_data = [
    {
        "extent": (0, 3, 0, 3),
        "h": (1.0, 1.0),
        "origin": (0, 0),

        "edge2cell": np.array([
    [0, 0, 0, 0],
    [1, 0, 0, 1],
    [2, 1, 0, 1],
    [2, 2, 1, 1],
    [3, 3, 0, 0],
    [4, 3, 0, 1],
    [5, 4, 0, 1],
    [5, 5, 1, 1],
    [6, 6, 0, 0],
    [7, 6, 0, 1],
    [8, 7, 0, 1],
    [8, 8, 1, 1],
    [0, 0, 2, 2],
    [1, 1, 2, 2],
    [2, 2, 2, 2],
    [0, 3, 3, 2],
    [1, 4, 3, 2],
    [2, 5, 3, 2],
    [3, 6, 3, 2],
    [4, 7, 3, 2],
    [5, 8, 3, 2],
    [6, 6, 3, 3],
    [7, 7, 3, 3],
    [8, 8, 3, 3]
], dtype=np.int32),
        "cell2cell": np.array([
    [0, 1, 0, 3],
    [0, 2, 1, 4],
    [1, 2, 2, 5],
    [3, 4, 0, 6],
    [3, 5, 1, 7],
    [4, 5, 2, 8],
    [6, 7, 3, 6],
    [6, 8, 4, 7],
    [7, 8, 5, 8]
], dtype=np.int32),
    }
]

boundary_data = [
    {
        "extent": (0, 4, 0, 4),
        "h": (1.0, 1.0),
        "origin": (0, 0),

        "boundary_node_flag": np.array([
    True, True, True, True, True, True, False, False, False, True, True, False,
    False, False, True, True, False, False, False, True, True, True, True, True, True
], dtype=bool),

        "boundary_edge_flag": np.array([
            True, False, False, False, True, True, False, False, False, True, True, False,
            False, False, True, True, False, False, False, True, True, True, True, True,
            False, False, False, False, False, False, False, False, False, False, False, False,
            True, True, True, True
        ], dtype=bool),

        "boundary_face_flag": np.array([
            True, False, False, False, True, True, False, False, False, True, True, False,
            False, False, True, True, False, False, False, True, True, True, True, True,
            False, False, False, False, False, False, False, False, False, False, False, False,
            True, True, True, True
        ], dtype=bool),

        "boundary_cell_flag": np.array([
            True, True, True, True, True, False, False, True, True, False, False, True,
            True, True, True, True
        ], dtype=bool),
    }
]