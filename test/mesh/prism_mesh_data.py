import numpy as np

init_data  = [
    {
        "node": np.array([[0.0, 0.0, 0.0],
                          [1.0, 0.0, 0.0],
                          [1.0, 1.0, 0.0],
                          [0.0, 1.0, 0.0],
                          [0.0, 0.0, 1.0],
                          [1.0, 0.0, 1.0],
                          [1.0, 1.0, 1.0],
                          [0.0, 1.0, 1.0]], dtype=np.float64),
        "cell": np.array([[0, 1, 3, 4, 5, 7],
                          [1, 2, 3, 5, 6, 7]], dtype=np.int32),
        "edge": np.array([[0, 1],
                          [0, 3],
                          [0, 4],
                          [1, 2],
                          [1, 3],
                          [1, 5],
                          [2, 3],
                          [2, 6],
                          [3, 7],
                          [4, 5],
                          [4, 7],
                          [5, 6],
                          [5, 7],
                          [6, 7]], dtype=np.int32),
        "face": np.array([[ 0,  3,  1, -1],
                          [ 1,  3,  2, -1],
                          [ 4,  5,  7, -1],
                          [ 5,  6,  7, -1],
                          [ 0,  1,  5,  4],
                          [ 0,  4,  7,  3],
                          [ 1,  2,  6,  5],
                          [ 1,  3,  7,  5],
                          [ 2,  3,  7,  6]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
                               [1, 1, 0, 0],
                               [0, 0, 1, 1],
                               [1, 1, 1, 1],
                               [0, 0, 2, 2],
                               [0, 0, 4, 4],
                               [1, 1, 2, 2],
                               [0, 1, 3, 4],
                               [1, 1, 3, 3]], dtype=np.int32),
        "NN": 8,
        "NE": 14,
        "NF": 9,
        "NC": 2
    },
]

total_face_data  = [
    {
        "node": np.array([[0.0, 0.0, 0.0],
                          [1.0, 0.0, 0.0],
                          [1.0, 1.0, 0.0],
                          [0.0, 1.0, 0.0],
                          [0.0, 0.0, 1.0],
                          [1.0, 0.0, 1.0],
                          [1.0, 1.0, 1.0],
                          [0.0, 1.0, 1.0]], dtype=np.float64),
        "cell": np.array([[0, 1, 3, 4, 5, 7],
                          [1, 2, 3, 5, 6, 7]], dtype=np.int32),
        "totalFace": np.array([[ 0,  3,  1, -1],
                               [ 4,  5,  7, -1],
                               [ 0,  1,  5,  4],
                               [ 1,  3,  7,  5],
                               [ 0,  4,  7,  3],
                               [ 1,  3,  2, -1],
                               [ 5,  6,  7, -1],
                               [ 1,  2,  6,  5],
                               [ 2,  3,  7,  6],
                               [ 1,  5,  7,  3]], dtype=np.int32)
    },

]

from_one_prism_data  = [
    {
        "meshtype": 'iso',
        "edge": np.array([[0, 1],
                         [0, 2],
                         [0, 3],
                         [1, 2],
                         [1, 4],
                         [2, 5],
                         [3, 4],
                         [3, 5],
                         [4, 5]], dtype=np.int32),
        "face": np.array([[ 0,  2,  1, -1],
                          [ 3,  4,  5, -1],
                          [ 0,  1,  4,  3],
                          [ 0,  3,  5,  2],
                          [ 1,  2,  5,  4]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
                               [0, 0, 1, 1],
                               [0, 0, 2, 2],
                               [0, 0, 4, 4],
                               [0, 0, 3, 3]], dtype=np.int32),
        "NN": 6,
        "NE": 9,
        "NF": 5,
        "NC": 1,
    },
    {
        "meshtype": 'equ',
        "edge": np.array([[0, 1],
                          [0, 2],
                          [0, 3],
                          [1, 2],
                          [1, 4],
                          [2, 5],
                          [3, 4],
                          [3, 5],
                          [4, 5]], dtype=np.int32),
        "face": np.array([[ 0,  2,  1, -1],
                          [ 3,  4,  5, -1],
                          [ 0,  1,  4,  3],
                          [ 0,  3,  5,  2],
                          [ 1,  2,  5,  4]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
                               [0, 0, 1, 1],
                               [0, 0, 2, 2],
                               [0, 0, 4, 4],
                               [0, 0, 3, 3]], dtype=np.int32),
        "NN": 6,
        "NE": 9,
        "NF": 5,
        "NC": 1,
    },
]

from_box  = [
    {
        "node": np.array([[0. , 0. , 0. ],
       [0. , 1. , 0. ],
       [1. , 0. , 0. ],
       [1. , 1. , 0. ],
       [0. , 0. , 0.5],
       [0. , 1. , 0.5],
       [1. , 0. , 0.5],
       [1. , 1. , 0.5],
       [0. , 0. , 1. ],
       [0. , 1. , 1. ],
       [1. , 0. , 1. ],
       [1. , 1. , 1. ]], dtype=np.float64),

        "edge": np.array([[ 1,  0],
       [ 2,  0],
       [ 3,  0],
       [ 0,  4],
       [ 1,  3],
       [ 1,  5],
       [ 2,  3],
       [ 2,  6],
       [ 3,  7],
       [ 5,  4],
       [ 6,  4],
       [ 7,  4],
       [ 4,  8],
       [ 5,  7],
       [ 5,  9],
       [ 6,  7],
       [ 6, 10],
       [ 7, 11],
       [ 9,  8],
       [10,  8],
       [11,  8],
       [ 9, 11],
       [10, 11]], dtype=np.int32),
        
        "face": np.array([[ 1,  3,  0, -1],
       [ 2,  0,  3, -1],
       [ 5,  4,  7, -1],
       [ 6,  7,  4, -1],
       [ 9,  8, 11, -1],
       [10, 11,  8, -1],
       [ 1,  0,  4,  5],
       [ 2,  6,  4,  0],
       [ 3,  0,  4,  7],
       [ 1,  5,  7,  3],
       [ 2,  3,  7,  6],
       [ 5,  4,  8,  9],
       [ 6, 10,  8,  4],
       [ 7,  4,  8, 11],
       [ 5,  9, 11,  7],
       [ 6,  7, 11, 10]], dtype=np.int32),
       "cell": np.array([[ 2,  3,  0,  6,  7,  4],
       [ 1,  0,  3,  5,  4,  7],
       [ 6,  7,  4, 10, 11,  8],
       [ 5,  4,  7,  9,  8, 11]], dtype=np.int32),
        "face2cell": np.array([[1, 1, 0, 0],
       [0, 0, 0, 0],
       [1, 3, 1, 0],
       [0, 2, 1, 0],
       [3, 3, 1, 1],
       [2, 2, 1, 1],
       [1, 1, 2, 2],
       [0, 0, 4, 4],
       [0, 1, 3, 3],
       [1, 1, 4, 4],
       [0, 0, 2, 2],
       [3, 3, 2, 2],
       [2, 2, 4, 4],
       [2, 3, 3, 3],
       [3, 3, 4, 4],
       [2, 2, 2, 2]], dtype=np.int32), 

        "NN": 12,
        "NE": 23,
        "NF": 16,
        "NC": 4
    },
]

from_wedge_data  = [
    {
        "node": np.array([[0., 0., 0.],
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [1., 0., 1.],
        [0., 1., 1.],
        [0., 0., 2.],
        [1., 0., 2.],
        [0., 1., 2.]], dtype=np.float64),

        "edge": np.array([[0, 1],
        [0, 2],
        [0, 3],
        [1, 2],
        [1, 4],
        [2, 5],
        [3, 4],
        [3, 5],
        [3, 6],
        [4, 5],
        [4, 7],
        [5, 8],
        [6, 7],
        [6, 8],
        [7, 8]], dtype=np.int32),
        
        "face": np.array([[ 0,  2,  1, -1],
        [ 3,  4,  5, -1],
        [ 6,  7,  8, -1],
        [ 0,  1,  4,  3],
        [ 0,  3,  5,  2],
        [ 1,  2,  5,  4],
        [ 3,  4,  7,  6],
        [ 3,  6,  8,  5],
        [ 4,  5,  8,  7]], dtype=np.int32),
       "cell": np.array([[0, 1, 2, 3, 4, 5],
        [3, 4, 5, 6, 7, 8]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
        [0, 1, 1, 0],
        [1, 1, 1, 1],
        [0, 0, 2, 2],
        [0, 0, 4, 4],
        [0, 0, 3, 3],
        [1, 1, 2, 2],
        [1, 1, 4, 4],
        [1, 1, 3, 3]], dtype=np.int32), 

        "NN": 9,
        "NE": 15,
        "NF": 9,
        "NC": 2
    },
]

face2edge_data = [
    {
        "face2edge": np.array([[ 1,  3,  0, -1],
        [ 6,  8,  7, -1],
        [ 0,  4,  6,  2],
        [ 2,  7,  5,  1],
        [ 3,  5,  8,  4]], dtype=np.int32)
    }
]

NF_data = [
    {
        "NF_t": 24,
        "NF_q": 195
    }
]

ipoints_data = [
    {
        "ldof": 40,
        "gdof": 995
    }
]