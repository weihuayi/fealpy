import numpy as np

init_data  = [
    {
        "node": np.array([[0.0, 0.0, 0.0],
                          [1.0, 0.0, 0.0],
                          [1.0, 1.0, 0.0],
                          [0.0, 1.0, 0.0],
                          [0.0, 0.0, 1.0],
                          [1.0, 0.0, 1.0],
                          [1.0, 1.0, 1.0],
                          [0.0, 1.0, 1.0]], dtype=np.float64),
        "cell": np.array([[0, 1, 3, 4, 5, 7],
                          [1, 2, 3, 5, 6, 7]], dtype=np.int32),
        "edge": np.array([[0, 1],
                          [0, 3],
                          [0, 4],
                          [1, 2],
                          [1, 3],
                          [1, 5],
                          [2, 3],
                          [2, 6],
                          [3, 7],
                          [4, 5],
                          [4, 7],
                          [5, 6],
                          [5, 7],
                          [6, 7]], dtype=np.int32),
        "face": np.array([[ 0,  3,  1, -1],
                          [ 1,  3,  2, -1],
                          [ 4,  5,  7, -1],
                          [ 5,  6,  7, -1],
                          [ 0,  1,  5,  4],
                          [ 0,  4,  7,  3],
                          [ 1,  2,  6,  5],
                          [ 1,  3,  7,  5],
                          [ 2,  3,  7,  6]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
                               [1, 1, 0, 0],
                               [0, 0, 1, 1],
                               [1, 1, 1, 1],
                               [0, 0, 2, 2],
                               [0, 0, 4, 4],
                               [1, 1, 2, 2],
                               [0, 1, 3, 4],
                               [1, 1, 3, 3]], dtype=np.int32),
        "NN": 8,
        "NE": 14,
        "NF": 9,
        "NC": 2
    },
]

total_face_data  = [
    {
        "node": np.array([[0.0, 0.0, 0.0],
                          [1.0, 0.0, 0.0],
                          [1.0, 1.0, 0.0],
                          [0.0, 1.0, 0.0],
                          [0.0, 0.0, 1.0],
                          [1.0, 0.0, 1.0],
                          [1.0, 1.0, 1.0],
                          [0.0, 1.0, 1.0]], dtype=np.float64),
        "cell": np.array([[0, 1, 3, 4, 5, 7],
                          [1, 2, 3, 5, 6, 7]], dtype=np.int32),
        "totalFace": np.array([[ 0,  3,  1, -1],
                               [ 4,  5,  7, -1],
                               [ 0,  1,  5,  4],
                               [ 1,  3,  7,  5],
                               [ 0,  4,  7,  3],
                               [ 1,  3,  2, -1],
                               [ 5,  6,  7, -1],
                               [ 1,  2,  6,  5],
                               [ 2,  3,  7,  6],
                               [ 1,  5,  7,  3]], dtype=np.int32)
    },

]

from_one_prism_data  = [
    {
        "meshtype": 'iso',
        "edge": np.array([[0, 1],
                         [0, 2],
                         [0, 3],
                         [1, 2],
                         [1, 4],
                         [2, 5],
                         [3, 4],
                         [3, 5],
                         [4, 5]], dtype=np.int32),
        "face": np.array([[ 0,  2,  1, -1],
                          [ 3,  4,  5, -1],
                          [ 0,  1,  4,  3],
                          [ 0,  3,  5,  2],
                          [ 1,  2,  5,  4]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
                               [0, 0, 1, 1],
                               [0, 0, 2, 2],
                               [0, 0, 4, 4],
                               [0, 0, 3, 3]], dtype=np.int32),
        "NN": 6,
        "NE": 9,
        "NF": 5,
        "NC": 1,
    },
    {
        "meshtype": 'equ',
        "edge": np.array([[0, 1],
                          [0, 2],
                          [0, 3],
                          [1, 2],
                          [1, 4],
                          [2, 5],
                          [3, 4],
                          [3, 5],
                          [4, 5]], dtype=np.int32),
        "face": np.array([[ 0,  2,  1, -1],
                          [ 3,  4,  5, -1],
                          [ 0,  1,  4,  3],
                          [ 0,  3,  5,  2],
                          [ 1,  2,  5,  4]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
                               [0, 0, 1, 1],
                               [0, 0, 2, 2],
                               [0, 0, 4, 4],
                               [0, 0, 3, 3]], dtype=np.int32),
        "NN": 6,
        "NE": 9,
        "NF": 5,
        "NC": 1,
    },
]

from_box  = [
    {
        "node": np.array([[0. , 0. , 0. ],
       [0. , 1. , 0. ],
       [1. , 0. , 0. ],
       [1. , 1. , 0. ],
       [0. , 0. , 0.5],
       [0. , 1. , 0.5],
       [1. , 0. , 0.5],
       [1. , 1. , 0.5],
       [0. , 0. , 1. ],
       [0. , 1. , 1. ],
       [1. , 0. , 1. ],
       [1. , 1. , 1. ]], dtype=np.float64),

        "edge": np.array([[ 1,  0],
       [ 2,  0],
       [ 3,  0],
       [ 0,  4],
       [ 1,  3],
       [ 1,  5],
       [ 2,  3],
       [ 2,  6],
       [ 3,  7],
       [ 5,  4],
       [ 6,  4],
       [ 7,  4],
       [ 4,  8],
       [ 5,  7],
       [ 5,  9],
       [ 6,  7],
       [ 6, 10],
       [ 7, 11],
       [ 9,  8],
       [10,  8],
       [11,  8],
       [ 9, 11],
       [10, 11]], dtype=np.int32),
        
        "face": np.array([[ 1,  3,  0, 0],
       [ 2,  0,  3,  3],
       [ 5,  4,  7,  7],
       [ 6,  7,  4,  4],
       [ 9,  8, 11, 11],
       [10, 11,  8,  8],
       [ 1,  0,  4,  5],
       [ 2,  6,  4,  0],
       [ 3,  0,  4,  7],
       [ 1,  5,  7,  3],
       [ 2,  3,  7,  6],
       [ 5,  4,  8,  9],
       [ 6, 10,  8,  4],
       [ 7,  4,  8, 11],
       [ 5,  9, 11,  7],
       [ 6,  7, 11, 10]], dtype=np.int32),
       "cell": np.array([[ 2,  3,  0,  6,  7,  4],
       [ 1,  0,  3,  5,  4,  7],
       [ 6,  7,  4, 10, 11,  8],
       [ 5,  4,  7,  9,  8, 11]], dtype=np.int32),
        "face2cell": np.array([[1, 1, 0, 0],
       [0, 0, 0, 0],
       [1, 3, 1, 0],
       [0, 2, 1, 0],
       [3, 3, 1, 1],
       [2, 2, 1, 1],
       [1, 1, 2, 2],
       [0, 0, 4, 4],
       [0, 1, 3, 3],
       [1, 1, 4, 4],
       [0, 0, 2, 2],
       [3, 3, 2, 2],
       [2, 2, 4, 4],
       [2, 3, 3, 3],
       [3, 3, 4, 4],
       [2, 2, 2, 2]], dtype=np.int32), 

        "NN": 12,
        "NE": 23,
        "NF": 16,
        "NC": 4
    },
]

from_wedge_data  = [
    {
        "node": np.array([[0., 0., 0.],
        [1., 0., 0.],
        [0., 1., 0.],
        [0., 0., 1.],
        [1., 0., 1.],
        [0., 1., 1.],
        [0., 0., 2.],
        [1., 0., 2.],
        [0., 1., 2.]], dtype=np.float64),

        "edge": np.array([[0, 1],
        [0, 2],
        [0, 3],
        [1, 2],
        [1, 4],
        [2, 5],
        [3, 4],
        [3, 5],
        [3, 6],
        [4, 5],
        [4, 7],
        [5, 8],
        [6, 7],
        [6, 8],
        [7, 8]], dtype=np.int32),
        
        "face": np.array([[ 0,  2,  1, 1],
        [ 3,  4,  5, 5],
        [ 6,  7,  8, 8],
        [ 0,  1,  4,  3],
        [ 0,  3,  5,  2],
        [ 1,  2,  5,  4],
        [ 3,  4,  7,  6],
        [ 3,  6,  8,  5],
        [ 4,  5,  8,  7]], dtype=np.int32),
       "cell": np.array([[0, 1, 2, 3, 4, 5],
        [3, 4, 5, 6, 7, 8]], dtype=np.int32),
        "face2cell": np.array([[0, 0, 0, 0],
        [0, 1, 1, 0],
        [1, 1, 1, 1],
        [0, 0, 2, 2],
        [0, 0, 4, 4],
        [0, 0, 3, 3],
        [1, 1, 2, 2],
        [1, 1, 4, 4],
        [1, 1, 3, 3]], dtype=np.int32), 

        "NN": 9,
        "NE": 15,
        "NF": 9,
        "NC": 2
    },
]

face2edge_data = [
    {
        "face2edge": np.array([
        [ 3,  0,  1,  1],
        [ 8,  7,  6,  6],
        [ 0,  4,  6,  2],
        [ 2,  7,  5,  1],
        [ 3,  5,  8,  4]], dtype=np.int32)
    }
]

NF_data = [
    {
        "NF_t": 24,
        "NF_q": 32
    }
]

ipoints_data = [
    {
        "ldof": 40,
        "gdof": 343
    }
]

entity2ipoint_data = [
    {
        "tface2ipoint": np.array([
            [0, 9, 8, 3, 12, 1],
            [2, 11, 14, 1, 12, 3],
            [4, 17, 18, 5, 20, 7],
            [6, 21, 19, 7, 20, 5]
        ], dtype=np.int32),
        "qface2ipoint": np.array([
            [
                [0, 10, 4, 8, 22, 17, 1, 13, 5],
                [0, 9, 3, 10, 23, 16, 4, 18, 7],
                [2, 11, 1, 15, 24, 13, 6, 19, 5],
                [1, 13, 5, 12, 25, 20, 3, 16, 7],
                [2, 15, 6, 14, 26, 21, 3, 16, 7]
            ]
        ], dtype=np.int32),
        "cell2ipoint": np.array([
            [0, 10, 4, 8, 22, 17, 9, 23, 18, 1, 13, 5, 12, 25, 20, 3, 16, 7],
            [2, 15, 6, 14, 26, 21, 11, 24, 19, 3, 16, 7, 12, 25, 20, 1, 13, 5]
        ], dtype=np.int32)
    }
]

interpolation_data = [
    {
        "ipoint0": np.array([
            [0., 0., 0.],
            [1., 0., 0.],
            [1., 1., 0.],
            [0., 1., 0.],
            [0., 0., 1.],
            [1., 0., 1.],
            [1., 1., 1.],
            [0., 1., 1.],
            [0.5, 0., 0.],
            [0., 0.5, 0.],
            [0., 0., 0.5],
            [1., 0.5, 0.],
            [0.5, 0.5, 0.],
            [1., 0., 0.5],
            [0.5, 1., 0.],
            [1., 1., 0.5],
            [0., 1., 0.5],
            [0.5, 0., 1.],
            [0., 0.5, 1.],
            [1., 0.5, 1.],
            [0.5, 0.5, 1.],
            [0.5, 1., 1.],
            [0.5, 0., 0.5],
            [0., 0.5, 0.5],
            [1., 0.5, 0.5],
            [0.5, 0.5, 0.5],
            [0.5, 1., 0.5]
        ], dtype=np.float64),

        "ipoint1": np.array([
            [0., 0., 0.],
            [1., 0., 0.],
            [1., 1., 0.],
            [0., 1., 0.],
            [0., 0., 1.],
            [1., 0., 1.],
            [1., 1., 1.],
            [0., 1., 1.],
            [0.33333333, 0., 0.],
            [0.66666667, 0., 0.],
            [0., 0.33333333, 0.],
            [0., 0.66666667, 0.],
            [0., 0., 0.33333333],
            [0., 0., 0.66666667],
            [1., 0.66666667, 0.],
            [1., 0.33333333, 0.],
            [0.66666667, 0.33333333, 0.],
            [0.33333333, 0.66666667, 0.],
            [1., 0., 0.33333333],
            [1., 0., 0.66666667],
            [0.66666667, 1., 0.],
            [0.33333333, 1., 0.],
            [1., 1., 0.33333333],
            [1., 1., 0.66666667],
            [0., 1., 0.33333333],
            [0., 1., 0.66666667],
            [0.33333333, 0., 1.],
            [0.66666667, 0., 1.],
            [0., 0.33333333, 1.],
            [0., 0.66666667, 1.],
            [1., 0.66666667, 1.],
            [1., 0.33333333, 1.],
            [0.66666667, 0.33333333, 1.],
            [0.33333333, 0.66666667, 1.],
            [0.66666667, 1., 1.],
            [0.33333333, 1., 1.],
            [0.33333333, 0.33333333, 0.],
            [0.66666667, 0.66666667, 0.],
            [0.33333333, 0.33333333, 1.],
            [0.66666667, 0.66666667, 1.],
            [0.33333333, 0., 0.33333333],
            [0.33333333, 0., 0.66666667],
            [0.66666667, 0., 0.33333333],
            [0.66666667, 0., 0.66666667],
            [0., 0.33333333, 0.33333333],
            [0., 0.66666667, 0.33333333],
            [0., 0.33333333, 0.66666667],
            [0., 0.66666667, 0.66666667],
            [1., 0.66666667, 0.33333333],
            [1., 0.33333333, 0.33333333],
            [1., 0.66666667, 0.66666667],
            [1., 0.33333333, 0.66666667],
            [0.66666667, 0.33333333, 0.33333333],
            [0.66666667, 0.33333333, 0.66666667],
            [0.33333333, 0.66666667, 0.33333333],
            [0.33333333, 0.66666667, 0.66666667],
            [0.66666667, 1., 0.33333333],
            [0.66666667, 1., 0.66666667],
            [0.33333333, 1., 0.33333333],
            [0.33333333, 1., 0.66666667],
            [0.33333333, 0.33333333, 0.33333333],
            [0.33333333, 0.33333333, 0.66666667],
            [0.66666667, 0.66666667, 0.33333333],
            [0.66666667, 0.66666667, 0.66666667]
        ], dtype=np.float64)
    }
]

jacobi_matrix_data = [
    {
        "J": np.array([
            [
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ]
            ],
            [
                [
                    [-1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [-1.00000000e+00, -1.11022302e-16, 0.00000000e+00],
                    [-1.11022302e-16, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [-1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [-1.00000000e+00, -1.11022302e-16, 0.00000000e+00],
                    [-1.11022302e-16, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [-1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [-1.00000000e+00, -1.11022302e-16, 0.00000000e+00],
                    [-1.11022302e-16, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [-1.00000000e+00, 0.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ],
                [
                    [-1.00000000e+00, -1.11022302e-16, 0.00000000e+00],
                    [-1.11022302e-16, -1.00000000e+00, 0.00000000e+00],
                    [0.00000000e+00, 0.00000000e+00, 1.00000000e+00]
                ]
            ]
        ], dtype=np.float64),
        
        "gphi": np.array([
            [
                [-0.5, -0.5, -0.33333333],
                [-0.5, -0.5, 0.33333333],
                [0.5, 0.0, -0.33333333],
                [0.5, 0.0, 0.33333333],
                [0.0, 0.5, -0.33333333],
                [0.0, 0.5, 0.33333333]
            ],
            [
                [-0.33333333, -0.33333333, -0.33333333],
                [-0.66666667, -0.66666667, 0.33333333],
                [0.33333333, 0.0, -0.33333333],
                [0.66666667, 0.0, 0.33333333],
                [0.0, 0.33333333, -0.33333333],
                [0.0, 0.66666667, 0.33333333]
            ],
            [
                [-0.5, -0.5, -0.14285714],
                [-0.5, -0.5, 0.14285714],
                [0.5, 0.0, -0.28571429],
                [0.5, 0.0, 0.28571429],
                [0.0, 0.5, -0.57142857],
                [0.0, 0.5, 0.57142857]
            ],
            [
                [-0.33333333, -0.33333333, -0.14285714],
                [-0.66666667, -0.66666667, 0.14285714],
                [0.33333333, 0.0, -0.28571429],
                [0.66666667, 0.0, 0.28571429],
                [0.0, 0.33333333, -0.57142857],
                [0.0, 0.66666667, 0.57142857]
            ],
            [
                [-0.5, -0.5, -0.5],
                [-0.5, -0.5, 0.5],
                [0.5, 0.0, -0.5],
                [0.5, 0.0, 0.5],
                [0.0, 0.5, -0.0],
                [0.0, 0.5, 0.0]
            ],
            [
                [-0.33333333, -0.33333333, -0.5],
                [-0.66666667, -0.66666667, 0.5],
                [0.33333333, 0.0, -0.5],
                [0.66666667, 0.0, 0.5],
                [0.0, 0.33333333, -0.0],
                [0.0, 0.66666667, 0.0]
            ],
            [
                [-0.5, -0.5, -0.0],
                [-0.5, -0.5, 0.0],
                [0.5, 0.0, -0.25],
                [0.5, 0.0, 0.25],
                [0.0, 0.5, -0.75],
                [0.0, 0.5, 0.75]
            ],
            [
                [-0.33333333, -0.33333333, -0.0],
                [-0.66666667, -0.66666667, 0.0],
                [0.33333333, 0.0, -0.25],
                [0.66666667, 0.0, 0.25],
                [0.0, 0.33333333, -0.75],
                [0.0, 0.66666667, 0.75]
            ]
        ], dtype=np.float64) 
    }
]

shape_function_data = [
    {
        "phi": np.array([
            [0.16666667, 0.16666667, 0.16666667, 0.16666667, 0.16666667, 0.16666667],
            [0.11111111, 0.22222222, 0.11111111, 0.22222222, 0.11111111, 0.22222222],
            [0.07142857, 0.07142857, 0.14285714, 0.14285714, 0.28571429, 0.28571429],
            [0.04761905, 0.0952381, 0.0952381, 0.19047619, 0.19047619, 0.38095238],
            [0.25, 0.25, 0.25, 0.25, 0.0, 0.0],
            [0.16666667, 0.33333333, 0.16666667, 0.33333333, 0.0, 0.0],
            [0.0, 0.0, 0.125, 0.125, 0.375, 0.375],
            [0.0, 0.0, 0.08333333, 0.16666667, 0.25, 0.5]
        ], dtype=np.float64)
    }
]

grad_shape_function_data = [
    {
        "gphi0": np.array([
            [
                [-0.5, -0.5, -0.33333333],
                [-0.5, -0.5, 0.33333333],
                [0.5, 0.0, -0.33333333],
                [0.5, 0.0, 0.33333333],
                [0.0, 0.5, -0.33333333],
                [0.0, 0.5, 0.33333333]
            ],
            [
                [-0.33333333, -0.33333333, -0.33333333],
                [-0.66666667, -0.66666667, 0.33333333],
                [0.33333333, 0.0, -0.33333333],
                [0.66666667, 0.0, 0.33333333],
                [0.0, 0.33333333, -0.33333333],
                [0.0, 0.66666667, 0.33333333]
            ],
            [
                [-0.5, -0.5, -0.14285714],
                [-0.5, -0.5, 0.14285714],
                [0.5, 0.0, -0.28571429],
                [0.5, 0.0, 0.28571429],
                [0.0, 0.5, -0.57142857],
                [0.0, 0.5, 0.57142857]
            ],
            [
                [-0.33333333, -0.33333333, -0.14285714],
                [-0.66666667, -0.66666667, 0.14285714],
                [0.33333333, 0.0, -0.28571429],
                [0.66666667, 0.0, 0.28571429],
                [0.0, 0.33333333, -0.57142857],
                [0.0, 0.66666667, 0.57142857]
            ],
            [
                [-0.5, -0.5, -0.5],
                [-0.5, -0.5, 0.5],
                [0.5, 0.0, -0.5],
                [0.5, 0.0, 0.5],
                [0.0, 0.5, -0.0],
                [0.0, 0.5, 0.0]
            ],
            [
                [-0.33333333, -0.33333333, -0.5],
                [-0.66666667, -0.66666667, 0.5],
                [0.33333333, 0.0, -0.5],
                [0.66666667, 0.0, 0.5],
                [0.0, 0.33333333, -0.0],
                [0.0, 0.66666667, 0.0]
            ],
            [
                [-0.5, -0.5, -0.0],
                [-0.5, -0.5, 0.0],
                [0.5, 0.0, -0.25],
                [0.5, 0.0, 0.25],
                [0.0, 0.5, -0.75],
                [0.0, 0.5, 0.75]
            ],
            [
                [-0.33333333, -0.33333333, -0.0],
                [-0.66666667, -0.66666667, 0.0],
                [0.33333333, 0.0, -0.25],
                [0.66666667, 0.0, 0.25],
                [0.0, 0.33333333, -0.75],
                [0.0, 0.66666667, 0.75]
            ]
        ], dtype=np.float64),
        
        "gphi1": np.array([
            [
                [
                    [-0.5, -0.5, -0.33333333],
                    [-0.5, -0.5, 0.33333333],
                    [0.5, 0.0, -0.33333333],
                    [0.5, 0.0, 0.33333333],
                    [0.0, 0.5, -0.33333333],
                    [0.0, 0.5, 0.33333333]
                ],
                [
                    [-0.33333333, -0.33333333, -0.33333333],
                    [-0.66666667, -0.66666667, 0.33333333],
                    [0.33333333, 0.0, -0.33333333],
                    [0.66666667, 0.0, 0.33333333],
                    [0.0, 0.33333333, -0.33333333],
                    [0.0, 0.66666667, 0.33333333]
                ],
                [
                    [-0.5, -0.5, -0.14285714],
                    [-0.5, -0.5, 0.14285714],
                    [0.5, 0.0, -0.28571429],
                    [0.5, 0.0, 0.28571429],
                    [0.0, 0.5, -0.57142857],
                    [0.0, 0.5, 0.57142857]
                ],
                [
                    [-0.33333333, -0.33333333, -0.14285714],
                    [-0.66666667, -0.66666667, 0.14285714],
                    [0.33333333, 0.0, -0.28571429],
                    [0.66666667, 0.0, 0.28571429],
                    [0.0, 0.33333333, -0.57142857],
                    [0.0, 0.66666667, 0.57142857]
                ],
                [
                    [-0.5, -0.5, -0.5],
                    [-0.5, -0.5, 0.5],
                    [0.5, 0.0, -0.5],
                    [0.5, 0.0, 0.5],
                    [0.0, 0.5, 0.0],
                    [0.0, 0.5, 0.0]
                ],
                [
                    [-0.33333333, -0.33333333, -0.5],
                    [-0.66666667, -0.66666667, 0.5],
                    [0.33333333, 0.0, -0.5],
                    [0.66666667, 0.0, 0.5],
                    [0.0, 0.33333333, 0.0],
                    [0.0, 0.66666667, 0.0]
                ],
                [
                    [-0.5, -0.5, 0.0],
                    [-0.5, -0.5, 0.0],
                    [0.5, 0.0, -0.25],
                    [0.5, 0.0, 0.25],
                    [0.0, 0.5, -0.75],
                    [0.0, 0.5, 0.75]
                ],
                [
                    [-0.33333333, -0.33333333, 0.0],
                    [-0.66666667, -0.66666667, 0.0],
                    [0.33333333, 0.0, -0.25],
                    [0.66666667, 0.0, 0.25],
                    [0.0, 0.33333333, -0.75],
                    [0.0, 0.66666667, 0.75]
                ]
            ],
            [
                [
                    [0.5, 0.5, -0.33333333],
                    [0.5, 0.5, 0.33333333],
                    [-0.5, 0.0, -0.33333333],
                    [-0.5, 0.0, 0.33333333],
                    [0.0, -0.5, -0.33333333],
                    [0.0, -0.5, 0.33333333]
                ],
                [
                    [0.33333333, 0.33333333, -0.33333333],
                    [0.66666667, 0.66666667, 0.33333333],
                    [-0.33333333, 3.70074342e-17, -0.33333333],
                    [-0.66666667, 7.40148683e-17, 0.33333333],
                    [3.70074342e-17, -0.33333333, -0.33333333],
                    [7.40148683e-17, -0.66666667, 0.33333333]
                ],
                [
                    [0.5, 0.5, -0.14285714],
                    [0.5, 0.5, 0.14285714],
                    [-0.5, 0.0, -0.28571429],
                    [-0.5, 0.0, 0.28571429],
                    [0.0, -0.5, -0.57142857],
                    [0.0, -0.5, 0.57142857]
                ],
                [
                    [0.33333333, 0.33333333, -0.14285714],
                    [0.66666667, 0.66666667, 0.14285714],
                    [-0.33333333, 3.70074342e-17, -0.28571429],
                    [-0.66666667, 7.40148683e-17, 0.28571429],
                    [3.70074342e-17, -0.33333333, -0.57142857],
                    [7.40148683e-17, -0.66666667, 0.57142857]
                ],
                [
                    [0.5, 0.5, -0.5],
                    [0.5, 0.5, 0.5],
                    [-0.5, 0.0, -0.5],
                    [-0.5, 0.0, 0.5],
                    [0.0, -0.5, 0.0],
                    [0.0, -0.5, 0.0]
                ],
                [
                    [0.33333333, 0.33333333, -0.5],
                    [0.66666667, 0.66666667, 0.5],
                    [-0.33333333, 3.70074342e-17, -0.5],
                    [-0.66666667, 7.40148683e-17, 0.5],
                    [3.70074342e-17, -0.33333333, 0.0],
                    [7.40148683e-17, -0.66666667, 0.0]
                ],
                [
                    [0.5, 0.5, 0.0],
                    [0.5, 0.5, 0.0],
                    [-0.5, 0.0, -0.25],
                    [-0.5, 0.0, 0.25],
                    [0.0, -0.5, -0.75],
                    [0.0, -0.5, 0.75]
                ],
                [
                    [0.33333333, 0.33333333, 0.0],
                    [0.66666667, 0.66666667, 0.0],
                    [-0.33333333, 3.70074342e-17, -0.25],
                    [-0.66666667, 7.40148683e-17, 0.25],
                    [3.70074342e-17, -0.33333333, -0.75],
                    [7.40148683e-17, -0.66666667, 0.75]
                ]
            ]
        ], dtype=np.float64)
    }
]

uniform_refine_data = [
    {
        "cell": np.array([
        [ 0,  9, 10, 11, 24, 25],
        [ 9, 12, 10, 24, 26, 25],
        [ 1, 12,  9, 13, 26, 24],
        [ 2, 10, 12, 14, 25, 26],
        [11, 24, 25,  3, 15, 16],
        [24, 26, 25, 15, 18, 16],
        [13, 26, 24,  4, 18, 15],
        [14, 25, 26,  5, 16, 18],
        [ 5, 16, 18, 20, 28, 29],
        [16, 15, 18, 28, 27, 29],
        [ 3, 15, 16, 17, 27, 28],
        [ 4, 18, 15, 19, 29, 27],
        [20, 28, 29,  8, 22, 23],
        [28, 27, 29, 22, 21, 23],
        [17, 27, 28,  6, 21, 22],
        [19, 29, 27,  7, 23, 21]
    ], dtype=np.int32),

    "node": np.array([
        [0.        , 0.        , 0.        ],
        [1.        , 0.        , 0.        ],
        [0.        , 1.        , 0.        ],
        [0.        , 0.        , 1.        ],
        [1.        , 0.        , 1.        ],
        [0.        , 1.        , 1.        ],
        [0.        , 0.        , 2.        ],
        [1.        , 0.        , 2.        ],
        [0.        , 1.        , 2.        ],
        [0.5       , 0.        , 0.        ],
        [0.        , 0.5       , 0.        ],
        [0.        , 0.        , 0.5       ],
        [0.5       , 0.5       , 0.        ],
        [1.        , 0         , 0.5        ],
        [0.        , 1.        , 0.5       ],
        [0.5       , 0.        , 1.        ],
        [0.        , 0.5       , 1.        ],
        [0.        , 0.        , 1.5       ],
        [0.5       , 0.5       , 1.        ],
        [1.        , 0.        , 1.5       ],
        [0.        , 1.        , 1.5       ],
        [0.5       , 0.        , 2.        ],
        [0.        , 0.5       , 2.        ],
        [0.5       , 0.5       , 2.        ],
        [0.5       , 0.        , 0.5       ],
        [0.        , 0.5       , 0.5       ],
        [0.5       , 0.5       , 0.5       ],
        [0.5       , 0.        , 1.5       ],
        [0.        , 0.5       , 1.5       ],
        [0.5       , 0.5       , 1.5       ]
    ], dtype=np.float64)
    }
]
    

