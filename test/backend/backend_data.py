import numpy as np
unique_data = [
        {
            "input": np.array([[0, 3], [2, 5], [0, 3], [1, 4], [7, 8], [1, 4]], dtype=np.int32),
            "result": (np.array([[0, 3],[1, 4],[2, 5],[7, 8]], dtype=np.int32), 
                    np.array([0, 3, 1, 4]), 
                    np.array([0, 2, 0, 1, 3, 1]), 
                    np.array([2, 2, 1, 1]))
        }
]

multi_index_data = [
        {
            "p": 2,
            "dim": 2,
            "result":np.array([[2,0,0],[1,1,0],[1,0,1],[0,2,0],[0,1,1],[0,0,2]],dtype=np.int32) 
        },
        {
            "p": 2,
            "dim": 1,
            "result":np.array([[2,0],[1,1],[0,2]],dtype=np.int32) 
        }
]

triangle_mesh2d_data = [
        {
            ## 输入
            "node": np.array([[0, 0], [0, 1], [1, 0], [1, 1]], dtype=np.float64),
            "edge": np.array([[1,0], [0,2], [3, 0], [3, 1], [2, 3]], dtype=np.int32),
            "cell": np.array([[2,3,0], [1,0,3]], dtype=np.int32),
            "bcs": np.array([[1,0,0],[1/3,1/3,1/3]],dtype=np.float64),
            "p" : 2,
            ## 结果
            "edge_length":np.array([1.0,1.0,np.sqrt(2),1.0,1.0],dtype=np.float64),
            "edge_normal":np.array([[-1,0],[0,-1],[-1,1],[0,1],[1,0]], dtype=np.float64),
            "edge_tangent":np.array([[0,-1],[1,0],[-1,-1],[-1,0],[0,1]], dtype=np.float64),
            "cell_barycenter":np.array([[2/3,1/3],[1/3,2/3]], dtype=np.float64),
            "edge_barycenter":np.array([[0,0.5],[0.5,0],[0.5,0.5],[0.5,1],[1,0.5]], dtype=np.float64),
            "bc_to_points":np.array([[[1,0],[2/3,1/3]],
                [[0,1],[1/3,2/3]]], dtype=np.float64),
            "simple_measure":np.array([1/2,1/2], dtype=np.float64),
            "simple_shape_function":np.array([[1,0,0,0,0,0],
                [-0.1111111, 0.4444444, 0.4444444, -0.1111111, 0.4444444, -0.1111111]], np.float64),
            "simple_grad_shape_function":
                np.array([[[ 3.0,         0.0,         0.0       ],
                   [ 0.0,         4.0,         0.0       ],
                   [ 0.0,         0.0,         4.0       ],
                   [-0.0,        -1.0,        -0.0       ],
                   [ 0.0,         0.0,         0.0       ],
                   [-0.0,        -0.0,        -1.0       ]],

                  [[ 0.33333333, -0.0,        -0.0       ],
                   [ 1.33333333,  1.33333333,  0.0       ],
                   [ 1.33333333,  0.0,         1.33333333],
                   [-0.0,         0.33333333, -0.0       ],
                   [ 0.0,         1.33333333,  1.33333333],
                   [-0.0,        -0.0,         0.33333333]]], dtype=np.float64),
            "triangle_grad_lambda_2d":np.array([[[1,-1],[0,1],[-1,0]],[[-1,1],[0,-1],[1,0]]],dtype=np.float64) 
        }
]


interval_mesh_data = [
        {
            ## 输入
            "node": np.array([[0], [1/3], [2/3], [1]], dtype=np.float64),
            "line": np.array([[0,1], [1,2], [2,3]], dtype=np.int32),
            ## 结果
            "interval_grad_lambda":np.array([[[-3],[3]],[[-3],[3]],[[-3],[3]]],dtype=np.float64) 
        }
]

triangle_mesh3d_data = [
        {
            ## 输入
            "node": np.array([[ 0.0,         0.85065081,  0.52573111],
                  [ 0.0,         0.85065081, -0.52573111],
                  [ 0.85065081,  0.52573111,  0.0       ],
                  [ 0.85065081, -0.52573111,  0.0       ],
                  [ 0.0,        -0.85065081, -0.52573111],
                  [ 0.0,        -0.85065081,  0.52573111],
                  [ 0.52573111,  0.0,         0.85065081],
                  [-0.52573111,  0.0,         0.85065081],
                  [ 0.52573111,  0.0,        -0.85065081],
                  [-0.52573111,  0.0,        -0.85065081],
                  [-0.85065081,  0.52573111,  0.0       ],
                  [-0.85065081, -0.52573111,  0.0       ]], dtype=np.float64),
            "cell": np.array([[ 6,  2,  0],
                  [ 3,  2,  6],
                  [ 5,  3,  6],
                  [ 5,  6,  7],
                  [ 6,  0,  7],
                  [ 3,  8,  2],
                  [ 2,  8,  1],
                  [ 2,  1,  0],
                  [ 0,  1, 10],
                  [ 1,  9, 10],
                  [ 8,  9,  1],
                  [ 4,  8,  3],
                  [ 4,  3,  5],
                  [ 4,  5, 11],
                  [ 7, 10, 11],
                  [ 0, 10,  7],
                  [ 4, 11,  9],
                  [ 8,  4,  9],
                  [ 5,  7, 11],
                  [10,  9, 11]], dtype=np.int32),
            ## 结果
            "triangle_area_3d":
            np.array([0.47872707, 0.47872707, 0.47872707, 0.47872707, 0.47872707,
                  0.47872707, 0.47872707, 0.47872707, 0.47872707, 0.47872707,
                  0.47872707, 0.47872707, 0.47872707, 0.47872707, 0.47872707,
                  0.47872707, 0.47872707, 0.47872707, 0.47872707, 0.47872707],dtype=np.float64),
            "triangle_grad_lambda_3d":
            np.array([[[ 0.12109042, -0.82996609,  0.70887567],
                   [ 0.70887567,  0.12109042, -0.82996609],
                   [-0.82996609,  0.70887567,  0.12109042]],

                  [[ 0.19592842, -0.95105652, -0.51294726],
                   [ 0.19592842,  0.95105652, -0.51294726],
                   [-0.39185683,  0.0,         1.02589451]],

                  [[-0.82996609, -0.70887567,  0.12109042],
                   [ 0.70887567, -0.12109042, -0.82996609],
                   [ 0.12109042,  0.82996609,  0.70887567]],

                  [[-0.0,        -1.02589451, -0.39185683],
                   [ 0.95105652,  0.51294726,  0.19592842],
                   [-0.95105652,  0.51294726,  0.19592842]],

                  [[ 0.95105652, -0.51294726,  0.19592842],
                   [ 0.0,         1.02589451, -0.39185683],
                   [-0.95105652, -0.51294726,  0.19592842]],

                  [[ 0.19592842, -0.95105652,  0.51294726],
                   [-0.39185683, -0.0,        -1.02589451],
                   [ 0.19592842,  0.95105652,  0.51294726]],

                  [[ 0.70887567,  0.12109042,  0.82996609],
                   [ 0.12109042, -0.82996609, -0.70887567],
                   [-0.82996609,  0.70887567, -0.12109042]],

                  [[ 1.02589451, -0.39185683,  0.0       ],
                   [-0.51294726,  0.19592842, -0.95105652],
                   [-0.51294726,  0.19592842,  0.95105652]],

                  [[ 0.51294726,  0.19592842,  0.95105652],
                   [ 0.51294726,  0.19592842, -0.95105652],
                   [-1.02589451, -0.39185683, -0.0       ]],

                  [[ 0.82996609,  0.70887567, -0.12109042],
                   [-0.12109042, -0.82996609, -0.70887567],
                   [-0.70887567,  0.12109042,  0.82996609]],

                  [[ 0.95105652, -0.51294726, -0.19592842],
                   [-0.95105652, -0.51294726, -0.19592842],
                   [ 0.0,         1.02589451,  0.39185683]],

                  [[-0.82996609, -0.70887567, -0.12109042],
                   [ 0.12109042,  0.82996609, -0.70887567],
                   [ 0.70887567, -0.12109042,  0.82996609]],

                  [[-0.51294726, -0.19592842, -0.95105652],
                   [ 1.02589451,  0.39185683,  0.0       ],
                   [-0.51294726, -0.19592842,  0.95105652]],

                  [[ 0.51294726, -0.19592842, -0.95105652],
                   [ 0.51294726, -0.19592842,  0.95105652],
                   [-1.02589451,  0.39185683,  0.0       ]],

                  [[ 0.39185683,  0.0,         1.02589451],
                   [-0.19592842,  0.95105652, -0.51294726],
                   [-0.19592842, -0.95105652, -0.51294726]],

                  [[ 0.82996609,  0.70887567,  0.12109042],
                   [-0.70887567,  0.12109042, -0.82996609],
                   [-0.12109042, -0.82996609,  0.70887567]],

                  [[ 0.82996609, -0.70887567, -0.12109042],
                   [-0.70887567, -0.12109042,  0.82996609],
                   [-0.12109042,  0.82996609, -0.70887567]],

                  [[ 0.95105652,  0.51294726, -0.19592842],
                   [ 0.0,        -1.02589451,  0.39185683],
                   [-0.95105652,  0.51294726, -0.19592842]],

                  [[ 0.82996609, -0.70887567,  0.12109042],
                   [-0.12109042,  0.82996609,  0.70887567],
                   [-0.70887567, -0.12109042, -0.82996609]],

                  [[-0.19592842,  0.95105652,  0.51294726],
                   [ 0.39185683,  0.0,        -1.02589451],
                   [-0.19592842, -0.95105652,  0.51294726]]], dtype=np.float64)
        }

]

tetrahedron_mesh_data = [
        {
            ## 输入
            "node":
            np.array([[0.0,        0.0,        0.0       ],
                   [1.0,        0.0,        0.0       ],
                   [0.5,        0.8660254,  0.0       ],
                   [0.5,        0.28867513, 0.81649658]],dtype=np.float64),
            "cell": np.array([[0,1,2,3]], dtype=np.int32),
            "localface":
            np.array([[1, 2, 3],
                  [0, 3, 2],
                  [0, 1, 3],
                  [0, 2, 1]],dtype=np.int32),
            ## 结果
            "tetrahedron_grad_lambda_3d":
             np.array([[[-1.0,       -0.57735027, -0.40824829],
                    [ 1.0,       -0.57735027, -0.40824829],
                    [ 0.0,        1.15470054, -0.40824829],
                    [ 0.0,        0.0,         1.22474487]]],dtype=np.float64)
        }
]
